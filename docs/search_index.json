[["index.html", "Desagregación de datos en encuestas de hogares: metodologías bayesianas para modelos de estimación en áreas pequeñas Agenda", " Desagregación de datos en encuestas de hogares: metodologías bayesianas para modelos de estimación en áreas pequeñas Andrés Gutiérrez1, Stalyn Guerrero2 2023-05-03 Agenda Experto Regional en Estadísticas Sociales - Comisión Económica para América Latina y el Caribe (CEPAL) - andres.gutierrez@cepal.org↩︎ Consultor - Comisión Económica para América Latina y el Caribe (CEPAL), guerrerostalyn@gmail.com↩︎ "],["material-del-curso.html", "Material del curso", " Material del curso En el siguiente enlace encontrará material bibliográfico complementario (Libros, presentaciones, casos de estudio y manuales de instalación) Descargar En el siguiente enlace encontrará las rutinas de R desarrolladas para el taller. Descargar "],["día-1---sesión-1--no-dejar-a-nadie-atrás---ods-y-la-agenda-2030.html", "Capítulo 1 Día 1 - Sesión 1- No dejar a nadie atrás - ODS y la Agenda 2030", " Capítulo 1 Día 1 - Sesión 1- No dejar a nadie atrás - ODS y la Agenda 2030 Objetivos de Desarrollo Sostenible y limitaciones de las encuesta "],["día-1---sesión-2--limitaciones-de-las-encuestas-de-hogares.html", "Capítulo 2 Día 1 - Sesión 2- Limitaciones de las encuestas de hogares", " Capítulo 2 Día 1 - Sesión 2- Limitaciones de las encuestas de hogares Objetivos de Desarrollo Sostenible y limitaciones de las encuesta "],["día-1---sesión-3--censo-e-información-satelital.html", "Capítulo 3 Día 1 - Sesión 3- Censo e información satelital ", " Capítulo 3 Día 1 - Sesión 3- Censo e información satelital "],["uso-de-imágenes-satelitales-y-sae.html", "3.1 Uso de imágenes satelitales y SAE", " 3.1 Uso de imágenes satelitales y SAE Uno de los artículo pioneros de estimación de áreas pequeñas fue el artículo de Singh, R, et. al. (2002) el cual abordó la estimación del rendimiento de cultivos para los tehsil (unidad subadministrativa) del distriyo Rohtak district en Haryana (India). Las imágenes raster representan el mundo mediante un conjunto de celdas contiguas igualmente espaciadas conocidas como pixeles, estas imágenes tienen información como un sistema de información geográfico, Un sistema de referencia de coordenadas. Las imágenes almacenan un identificador, un valor en cada pixel (o un vector con diferentes valores) y cada celda tiene asociada una escala de colores. Las imágenes pueden obtenerse crudas y procesadas, estas primeras contienen solamente las capas de colores, las segundas contienen también valores que han sido procesados en cada celda (índices de vegetación, intensidad lumínica, tipo de vegetación). La información cruda puede utilizarse para entrenar características que se desean entrenar (carreteras, tipo de cultivo, bosque / no bosque), afortunadamente en Google Earth Engine encontramos muchos indicadores procesadas asociadas a un pixel. Estos indicadores pueden agregarse a nivel de un área geográfica. 3.1.1 Fuentes de datos de imágenes satelitales Algunas de las principales fuentes de imágenes satelitales son: http://earthexplorer.usgs.gov/ https://lpdaacsvc.cr.usgs.gov/appeears/ https://search.earthdata.nasa.gov/search https://scihub.copernicus.eu/ https://aws.amazon.com/public-data-sets/landsat/ Sin embargo la mayor parte de estas fuentes están centralizadas en Google Earth Engine que permite buscar fuentes de datos provenientes de imágenes satelitales. GEE se puede manejar por medio de APIS en diferentes lenguajes de programación: Javascript (por defecto), Python y R (paquete rgee). "],["google-earth-eninge.html", "3.2 Google Earth Eninge", " 3.2 Google Earth Eninge Crear una cuenta en link, una vez que se ingrese a la cuenta puede buscarse los conjuntos de datos de interés: Una vez se busque el conjunto de datos se puede abrir un editor de código brindado por google en Javascript. Copiar y pegar la sintaxis que brinda el buscador de conjunto de datos para visualizar la imagen raster y disponer de sentencias que Permitan la obtención del conjunto de datos de interés posteriormente en R "],["instalación-de-rgee.html", "3.3 Instalación de rgee", " 3.3 Instalación de rgee Descargar e instalar anaconda o conda. (https://www.anaconda.com/products/individual) Abrir Anaconda prompt y configurar ambiente de trabajo (ambiente python rgee_py) con las siguientes sentencias: conda create -n rgee_py python=3.9 activate rgee_py pip install google-api-python-client pip install earthengine-api pip install numpy Listar los ambientes de Python disponibles en anaconda prompt conda env list Una vez identificado la ruta del ambiente ambiente rgee_py definirla en R (no se debe olvidar cambiar \\ por /). Instalar reticulate y rgee, cargar paquetes para procesamiento espacial y configurar el ambiente de trabajo como sigue: library(reticulate) # Conexión con Python library(rgee) # Conexión con Google Earth Engine library(sf) # Paquete para manejar datos geográficos library(dplyr) # Paquete para procesamiento de datos library(magrittr) rgee_environment_dir = &quot;C://Users//sguerrero//Anaconda3//envs//rgee_py//python.exe&quot; # Configurar python (Algunas veces no es detectado y se debe reiniciar R) reticulate::use_python(rgee_environment_dir, required=T) rgee::ee_install_set_pyenv(py_path = rgee_environment_dir, py_env = &quot;rgee_py&quot;) Sys.setenv(RETICULATE_PYTHON = rgee_environment_dir) Sys.setenv(EARTHENGINE_PYTHON = rgee_environment_dir) Una vez configurado el ambiente puede iniciarlizarse una sesión de Google Earth Engine como sigue: rgee::ee_Initialize(drive = T) Notas: Se debe inicializar cada sesión con el comando rgee::ee_Initialize(drive = T). Los comandos de javascript que invoquen métodos con “.” se sustituyen por signo peso ($), por ejemplo: ee.ImageCollection().filterDate() # Javascript ee$ImageCollection()$filterDate() # R 3.3.1 Descargar información satelital Paso 1: disponer de los shapefile shape &lt;- read_sf(&quot;Recursos/Día1/Sesion2/Shape/DOM.shp&quot;) plot(shape[&quot;geometry&quot;]) Paso 2: Seleccionar el archivo de imágenes que desea procesar, para nuestro ejemplo luces nocturnas. luces &lt;- ee$ImageCollection(&quot;NOAA/DMSP-OLS/NIGHTTIME_LIGHTS&quot;) %&gt;% ee$ImageCollection$filterDate(&quot;2013-01-01&quot;, &quot;2014-01-01&quot;) %&gt;% ee$ImageCollection$map(function(x) x$select(&quot;stable_lights&quot;)) %&gt;% ee$ImageCollection$toBands() Paso 3: Descargar la información shape_luces &lt;- map(unique(shape$dam), ~tryCatch(ee_extract( x = luces, y = shape[&quot;dam&quot;] %&gt;% filter(dam == .x), ee$Reducer$mean(), sf = FALSE ) %&gt;% mutate(dam = .x), error = function(e)data.frame(dam = .x))) shape_luces %&lt;&gt;% bind_rows() tba(shape_luces, cap = &quot;Promedio de luces nocturnasa&quot;) Repetir la rutina para: Tipo de suelo: crops-coverfraction (Porcentaje de cubrimiento cultivos) y urban-coverfraction (Porcentaje de cobertura urbana) disponibles en https://developers.google.com/earth-engine/datasets/catalog/COGTMNICUS_Landcover_100m_Proba-V-C3_Global#description Tiempo de viaje al hospital o clínica más cercana (accessibility) y tiempo de viaje al hospital o clínica más cercana utilizando transporte no motorizado (accessibility_walking_only) información disponible en https://develoGTMs.google.com/earth-engine/datasets/catalog/Oxford_MAP_accessibility_to_healthcare_2019 Modificación humana, donde se consideran los asentamiento humano, la agricultura, el transporte, la minería y producción de energía e infraestructura eléctrica. En el siguiente link encuentra la información satelital https://develoGTMs.google.com/earth-engine/datasets/catalog/CSP_HM_GlobalHumanModification#description Paso 4 consolidar la información. dam luces_nocturnas cubrimiento_cultivo cubrimiento_urbano modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 02 97.27735 107.10243 100.28394 111.01645 112.25437 109.66652 03 94.36142 97.71126 96.32667 96.29454 100.55525 105.35470 04 96.53042 95.73335 96.55354 98.67362 102.77860 103.78255 05 91.61138 98.91270 93.17994 95.16236 97.72809 95.59357 01 97.65958 86.79795 106.90397 82.34083 89.53466 87.11064 06 100.52567 107.21708 99.96448 104.95498 94.75524 95.69942 08 94.54495 103.38473 93.84241 102.73169 98.74441 101.96155 09 96.82438 91.41961 97.18788 92.96846 91.28395 90.46557 30 95.68487 91.78986 93.93370 96.83847 98.54392 98.93543 10 92.18900 98.33939 94.53840 97.45111 108.54346 107.34596 Los resultados se muestran en los siguientes mapas 3.3.2 Luces nocturnas 3.3.3 Cubrimiento cultivos 3.3.4 Cubrimiento urbanos 3.3.5 Modificación humana 3.3.6 Tiempo promedio al hospital 3.3.7 Tiempo promedio al hospital en vehiculo no motorizado "],["censos-de-población-y-vivienda.html", "3.4 Censos de población y vivienda", " 3.4 Censos de población y vivienda Es necesario definir las variables del país con los que se desea trabajar. De acuerdo a esto, como primer paso se debe tener acceso al censo del país, para ello puede acceder desde el siguiente enlace https://redatam.org/en/microdata en el cual dispondrá de un archivo .zip con los microdatos del país. Ahora bien, para leer el conjunto de datos, es necesario emplear la función redatam.open de la librería redatam, la cual depende directamente del diccionario censal del software REDATAM, este es un archivo con extensión dicx y que debe encontrarse en la carpeta sobre los datos que se están leyendo. Así, es como se crea un objeto dentro de R que hace la respectiva unión del diccionario con los microdatos de la base de datos censal. La siguiente sintaxis muestra la lectura del diccionario en R y los cálculos iniciales # https://redatamr.ideasybits.com/ library(redatam) RepDoma &lt;- redatam.open(&quot;cpv2010dom-cde.dicX&quot;) CONTEOS &lt;- redatam.query(RepDoma, &quot;freq PROVIC.IDPROVI by VIVIENDA.ZONA by PERSONA.P27 by PERSONA.P29 by PERSONA.ANEST&quot;, tot.omit = FALSE) Después de realizar algunas validaciones se estandarizan las variables como muestra el siguiente código. CONTEOS &lt;- readRDS(file = &quot;Recursos/Día1/Sesion2/Data/CONTEOS.RDS&quot;) # Eliminando totales de la tabla CONTEOS2 &lt;- CONTEOS %&gt;% filter_at(vars(matches(&quot;_label&quot;)),all_vars(. != &quot;__tot__&quot;)) censo_mrp &lt;- CONTEOS2 %&gt;% transmute(dam = str_pad( string = IDPROVI1_value, width = 2, pad = &quot;0&quot; ), area = case_when(ZONA2_value == 1 ~ &quot;1&quot;, # 1 = Urbana TRUE ~ &quot;0&quot;), sexo = as.character(P273_value), edad = case_when( P294_value %in% 0:14 ~ &quot;1&quot;, # 0 a 14 P294_value %in% 15:29 ~ &quot;2&quot;, # 15 a 29 P294_value %in% 30:44 ~ &quot;3&quot;, # 30 a 44 P294_value %in% 45:64 ~ &quot;4&quot;, # 45 a 64 TRUE ~ &quot;5&quot;), # 65 o mas anoest = case_when( P294_value &lt; 5| is.na(ANEST5_value) ~ &quot;98&quot;, # No aplica ANEST5_value == 99 ~ &quot;99&quot;, #NS/NR ANEST5_value %in% 0 ~ &quot;1&quot;, # Sin educacion ANEST5_value %in% c(1:6) ~ &quot;2&quot;, # 1-6 ANEST5_value %in% c(7:12) ~ &quot;3&quot;, # 7-12 ANEST5_value &gt; 12 ~ &quot;4&quot; , # 12 o mas TRUE ~ &quot;Error&quot; ), value) %&gt;% group_by(dam, area, sexo, edad,anoest) %&gt;% summarise(n = sum(value), .groups = &quot;drop&quot;) A partir de la base estandarizada es posible construir algunas covariables para la dam. censo_mrp &lt;- readRDS(&quot;Recursos/Día1/Sesion2/Data/censo_mrp_dam.rds&quot;) tasa_censo &lt;- model.matrix(dam ~ -1 +., data = censo_mrp %&gt;% select(-n)) %&gt;% data.frame() %&gt;% mutate(dam = censo_mrp$dam, n = censo_mrp$n) %&gt;% group_by(dam) %&gt;% summarise_all(~weighted.mean(x = .,w = n)) %&gt;% select(-area0, -anoest98,-anoest98,-n) tba(tasa_censo) dam area1 sexo2 edad2 edad3 edad4 edad5 anoest2 anoest3 anoest4 anoest99 01 1.0000 0.5224 0.2781 0.2117 0.1808 0.0725 0.2000 0.3680 0.2286 0.0193 02 0.7718 0.4733 0.2773 0.1831 0.1531 0.0634 0.3350 0.2771 0.0540 0.0065 03 0.7128 0.4804 0.2643 0.1572 0.1489 0.0718 0.3470 0.2542 0.0493 0.0055 04 0.8345 0.4826 0.2756 0.1738 0.1454 0.0638 0.3169 0.2948 0.0827 0.0082 05 0.5977 0.4849 0.2509 0.1752 0.1748 0.0899 0.3471 0.3252 0.0625 0.0052 06 0.6626 0.4909 0.2671 0.1988 0.1736 0.0786 0.3140 0.3383 0.1038 0.0087 07 0.4828 0.4768 0.2380 0.1431 0.1527 0.0788 0.3287 0.1949 0.0315 0.0037 08 0.5144 0.4610 0.2648 0.1728 0.1625 0.0845 0.3822 0.2730 0.0440 0.0035 09 0.4535 0.4889 0.2733 0.2084 0.1694 0.0764 0.3125 0.3699 0.0840 0.0078 10 0.7996 0.4865 0.2658 0.1648 0.1418 0.0665 0.3214 0.2603 0.0485 0.0052 11 0.7784 0.4766 0.3001 0.2393 0.1250 0.0430 0.2986 0.3722 0.0650 0.0076 12 0.9425 0.5059 0.2821 0.2061 0.1466 0.0515 0.2810 0.3955 0.0794 0.0080 13 0.4696 0.4885 0.2762 0.2049 0.1606 0.0719 0.3142 0.3582 0.0781 0.0070 14 0.5252 0.4855 0.2700 0.1929 0.1729 0.0731 0.3258 0.3517 0.0765 0.0079 15 0.5312 0.4718 0.2685 0.1984 0.1764 0.0798 0.3103 0.3318 0.0519 0.0048 16 0.6441 0.4651 0.2738 0.1932 0.1334 0.0459 0.2589 0.2403 0.0316 0.0028 17 0.6810 0.5047 0.2665 0.1984 0.1549 0.0646 0.3707 0.3252 0.0460 0.0052 18 0.5839 0.4895 0.2699 0.2126 0.1689 0.0703 0.2875 0.3940 0.0727 0.0067 19 0.2891 0.4902 0.2568 0.2001 0.1839 0.0954 0.3037 0.3483 0.1097 0.0078 20 0.4354 0.4837 0.2811 0.2007 0.1554 0.0628 0.3080 0.3691 0.0595 0.0059 21 0.5186 0.4996 0.2807 0.1956 0.1451 0.0507 0.2931 0.3782 0.0783 0.0082 22 0.6009 0.4725 0.2559 0.1698 0.1695 0.0891 0.3482 0.2674 0.0642 0.0075 23 0.8408 0.5063 0.2861 0.1974 0.1522 0.0572 0.2840 0.4022 0.0817 0.0077 24 0.5628 0.4827 0.2754 0.1871 0.1662 0.0743 0.3198 0.3320 0.1000 0.0089 25 0.7561 0.5017 0.2795 0.2221 0.1583 0.0649 0.2843 0.3727 0.1106 0.0102 26 0.4795 0.4776 0.2632 0.1821 0.1770 0.1038 0.3340 0.3156 0.0767 0.0074 27 0.7917 0.4785 0.2810 0.2098 0.1501 0.0681 0.3121 0.3151 0.0817 0.0074 28 0.6797 0.4949 0.2690 0.2028 0.1597 0.0655 0.2883 0.3819 0.0855 0.0101 29 0.4939 0.4836 0.2656 0.1718 0.1537 0.0756 0.3438 0.3188 0.0526 0.0056 30 0.7412 0.4902 0.2722 0.1855 0.1624 0.0775 0.3308 0.3338 0.0696 0.0070 31 0.6292 0.4587 0.2556 0.2037 0.1761 0.0848 0.3785 0.2681 0.0602 0.0050 32 0.8780 0.5098 0.2870 0.2126 0.1502 0.0447 0.2409 0.4005 0.1291 0.0131 Es posible construir a partir de una variable del censo, haciendo que el proceso se hace más corto, para este caso es empleada la variable VIVIENDA.V05, agregada por dam En el primer bloque que código usando la función redatam.query() se realiza el conteo de viviendas que tienen el piso de tierra. Seguido de esto, eliminamos los registros que no son de interés, por ejemplo, el total en la dam o total nacional, los cuales se identifican dentro de la base con la etiqueta __tot__. El siguiente paso es contar el número de viviendas por dam que tienen piso de tierra en el censo (Pobx) y el total de viviendas que respondieron a la pregunta (PobT), para finalmente realizar el cociente de estas dos preguntas. CONTEOS &lt;- redatam.query(RepDoma, &quot;freq PROVIC.IDPROVI by VIVIENDA.V05&quot;, tot.omit = FALSE) PISO &lt;- CONTEOS %&gt;% filter_at(vars(matches(&quot;_label&quot;)), all_vars(!. %in% c(&quot;__tot__&quot;,&quot;__mv__&quot;) )) tasa_piso &lt;- PISO %&gt;% mutate(Pobx = ifelse(V052_value %in% c(7), value, 0), PobT = value) %&gt;% group_by( depto = str_pad( string = IDPROVI1_value, width = 2, pad = &quot;0&quot; ) ) %&gt;% summarise(PobT = sum(PobT), Pobx = sum(Pobx)) %&gt;% transmute(depto, piso_tierra = Pobx/PobT) La tabla resultante se muestra a continuación. dam piso_tierra 02 0.1038 03 0.1435 04 0.0828 05 0.0593 01 0.0033 06 0.0191 08 0.0582 09 0.0365 30 0.0564 10 0.1133 11 0.0089 07 0.3020 12 0.0120 13 0.0214 14 0.0252 28 0.0197 15 0.0926 29 0.0523 16 0.2136 17 0.0257 18 0.0422 24 0.0287 19 0.0155 20 0.0211 21 0.0323 31 0.0734 22 0.1748 23 0.0221 26 0.0357 25 0.0170 32 0.0152 27 0.0620 El proceso se repite con otras preguntas del censo hasta consolidar la tabla siguiente. predictors_censo_dam &lt;- readRDS(&quot;Recursos/Día1/Sesion2/Data/predictors_censo_dam.rds&quot;) tba(predictors_censo_dam) dam area1 sexo2 edad2 edad3 edad4 edad5 anoest2 anoest3 anoest4 anoest99 tiene_sanitario tiene_acueducto tiene_gas eliminar_basura tiene_internet piso_tierra material_paredes material_techo rezago_escolar alfabeta hacinamiento tasa_desocupacion 02 0.7718 0.4733 0.2773 0.1831 0.1531 0.0634 0.3350 0.2771 0.0540 0.0065 0.1587 0.7424 0.3233 0.1962 0.9594 0.1038 0.1229 0.0489 0.1050 0.7512 0.3066 0.0016 03 0.7128 0.4804 0.2643 0.1572 0.1489 0.0718 0.3470 0.2542 0.0493 0.0055 0.2531 0.6512 0.4074 0.4032 0.9705 0.1435 0.2050 0.0935 0.1047 0.7433 0.2683 0.0008 04 0.8345 0.4826 0.2756 0.1738 0.1454 0.0638 0.3169 0.2948 0.0827 0.0082 0.1426 0.7577 0.3386 0.2966 0.9441 0.0828 0.1261 0.0559 0.1652 0.8083 0.3060 0.0013 05 0.5977 0.4849 0.2509 0.1752 0.1748 0.0899 0.3471 0.3252 0.0625 0.0052 0.0624 0.8704 0.2923 0.3864 0.9466 0.0593 0.0901 0.0339 0.1133 0.8275 0.1455 0.0006 01 1.0000 0.5224 0.2781 0.2117 0.1808 0.0725 0.2000 0.3680 0.2286 0.0193 0.0119 0.7946 0.0673 0.0810 0.6678 0.0033 0.0109 0.0111 0.3694 0.9247 0.1962 0.0066 06 0.6626 0.4909 0.2671 0.1988 0.1736 0.0786 0.3140 0.3383 0.1038 0.0087 0.0656 0.5465 0.2116 0.3791 0.9119 0.0191 0.0955 0.0149 0.1718 0.8580 0.1501 0.0021 08 0.5144 0.4610 0.2648 0.1728 0.1625 0.0845 0.3822 0.2730 0.0440 0.0035 0.2241 0.5158 0.4239 0.4996 0.9655 0.0582 0.2128 0.0240 0.0816 0.7910 0.3178 0.0008 09 0.4535 0.4889 0.2733 0.2084 0.1694 0.0764 0.3125 0.3699 0.0840 0.0078 0.0496 0.6379 0.1732 0.3440 0.9114 0.0365 0.0806 0.0145 0.1391 0.8654 0.1709 0.0013 30 0.7412 0.4902 0.2722 0.1855 0.1624 0.0775 0.3308 0.3338 0.0696 0.0070 0.1346 0.4029 0.2879 0.3509 0.9449 0.0564 0.1727 0.0209 0.1269 0.8358 0.2080 0.0007 10 0.7996 0.4865 0.2658 0.1648 0.1418 0.0665 0.3214 0.2603 0.0485 0.0052 0.1983 0.7116 0.4010 0.3478 0.9788 0.1133 0.1710 0.1151 0.1016 0.7355 0.3088 0.0004 11 0.7784 0.4766 0.3001 0.2393 0.1250 0.0430 0.2986 0.3722 0.0650 0.0076 0.0499 0.1475 0.1943 0.2442 0.9006 0.0089 0.0871 0.0182 0.1158 0.8615 0.3985 0.0028 07 0.4828 0.4768 0.2380 0.1431 0.1527 0.0788 0.3287 0.1949 0.0315 0.0037 0.2423 0.5225 0.6287 0.5988 0.9826 0.3020 0.2668 0.0577 0.0710 0.6320 0.2933 0.0005 12 0.9425 0.5059 0.2821 0.2061 0.1466 0.0515 0.2810 0.3955 0.0794 0.0080 0.0482 0.7438 0.1351 0.1958 0.8864 0.0120 0.0710 0.0404 0.1455 0.8905 0.3271 0.0021 13 0.4696 0.4885 0.2762 0.2049 0.1606 0.0719 0.3142 0.3582 0.0781 0.0070 0.0482 0.4743 0.1600 0.2868 0.9109 0.0214 0.0301 0.0215 0.1327 0.8496 0.1545 0.0024 14 0.5252 0.4855 0.2700 0.1929 0.1729 0.0731 0.3258 0.3517 0.0765 0.0079 0.0914 0.6197 0.2136 0.4319 0.9307 0.0252 0.1265 0.0256 0.1335 0.8534 0.1747 0.0011 28 0.6797 0.4949 0.2690 0.2028 0.1597 0.0655 0.2883 0.3819 0.0855 0.0101 0.0385 0.7019 0.1433 0.1773 0.8864 0.0197 0.0217 0.0151 0.1560 0.8700 0.1483 0.0015 15 0.5312 0.4718 0.2685 0.1984 0.1764 0.0798 0.3103 0.3318 0.0519 0.0048 0.0963 0.8061 0.3138 0.4871 0.9562 0.0926 0.0724 0.0409 0.0894 0.7713 0.1734 0.0007 29 0.4939 0.4836 0.2656 0.1718 0.1537 0.0756 0.3438 0.3188 0.0526 0.0056 0.1584 0.3967 0.3666 0.5787 0.9690 0.0523 0.2579 0.0166 0.1000 0.8193 0.1801 0.0015 16 0.6441 0.4651 0.2738 0.1932 0.1334 0.0459 0.2589 0.2403 0.0316 0.0028 0.2475 0.6564 0.4743 0.4722 0.9689 0.2136 0.1851 0.1202 0.0647 0.6170 0.3718 0.0002 17 0.6810 0.5047 0.2665 0.1984 0.1549 0.0646 0.3707 0.3252 0.0460 0.0052 0.0597 0.6812 0.2013 0.2577 0.9238 0.0257 0.1211 0.0286 0.0852 0.8494 0.2445 0.0012 18 0.5839 0.4895 0.2699 0.2126 0.1689 0.0703 0.2875 0.3940 0.0727 0.0067 0.0508 0.6276 0.2385 0.2723 0.8766 0.0422 0.1088 0.0321 0.1231 0.8535 0.1761 0.0029 24 0.5628 0.4827 0.2754 0.1871 0.1662 0.0743 0.3198 0.3320 0.1000 0.0089 0.0888 0.5112 0.2304 0.4438 0.9395 0.0287 0.1069 0.0106 0.1725 0.8535 0.1312 0.0014 19 0.2891 0.4902 0.2568 0.2001 0.1839 0.0954 0.3037 0.3483 0.1097 0.0078 0.0336 0.3167 0.2653 0.5648 0.9315 0.0155 0.0943 0.0099 0.1731 0.8522 0.1199 0.0006 20 0.4354 0.4837 0.2811 0.2007 0.1554 0.0628 0.3080 0.3691 0.0595 0.0059 0.1084 0.5409 0.2254 0.4523 0.9463 0.0211 0.1233 0.0342 0.1070 0.8418 0.2265 0.0009 21 0.5186 0.4996 0.2807 0.1956 0.1451 0.0507 0.2931 0.3782 0.0783 0.0082 0.0598 0.6674 0.1860 0.3141 0.9105 0.0323 0.0689 0.0185 0.1483 0.8755 0.2328 0.0047 31 0.6292 0.4587 0.2556 0.2037 0.1761 0.0848 0.3785 0.2681 0.0602 0.0050 0.0938 0.8112 0.3792 0.3025 0.9654 0.0734 0.1714 0.0277 0.1021 0.7747 0.2180 0.0005 22 0.6009 0.4725 0.2559 0.1698 0.1695 0.0891 0.3482 0.2674 0.0642 0.0075 0.1496 0.7350 0.3965 0.3638 0.9565 0.1748 0.2050 0.0633 0.1236 0.7571 0.2152 0.0019 23 0.8408 0.5063 0.2861 0.1974 0.1522 0.0572 0.2840 0.4022 0.0817 0.0077 0.1011 0.6079 0.1780 0.2227 0.8981 0.0221 0.0610 0.0161 0.1481 0.8904 0.2771 0.0023 26 0.4795 0.4776 0.2632 0.1821 0.1770 0.1038 0.3340 0.3156 0.0767 0.0074 0.0542 0.7367 0.2924 0.4135 0.9223 0.0357 0.0765 0.0414 0.1274 0.8042 0.1157 0.0005 25 0.7561 0.5017 0.2795 0.2221 0.1583 0.0649 0.2843 0.3727 0.1106 0.0102 0.0246 0.8397 0.1335 0.1783 0.8308 0.0170 0.0179 0.0176 0.1831 0.8801 0.1668 0.0062 32 0.8780 0.5098 0.2870 0.2126 0.1502 0.0447 0.2409 0.4005 0.1291 0.0131 0.0348 0.6973 0.0795 0.2003 0.8280 0.0152 0.0365 0.0146 0.2311 0.9110 0.2110 0.0188 27 0.7917 0.4785 0.2810 0.2098 0.1501 0.0681 0.3121 0.3151 0.0817 0.0074 0.0623 0.8198 0.2460 0.1664 0.9299 0.0620 0.0491 0.0277 0.1404 0.7995 0.1739 0.0010 3.4.1 Mapas de las variables con información censal. temp2 &lt;- inner_join(shape[&quot;dam&quot;], predictors_censo_dam) for(ii in names(predictors_censo_dam[,-1])){ plot( temp2[ii], key.pos = 4, breaks = quantile(temp2[[ii]])) } "],["día-2---sesión-1--fundamentos-de-la-inferencia-bayesiana-en-r-y-stan.html", "Capítulo 4 Día 2 - Sesión 1- Fundamentos de la inferencia Bayesiana en R y STAN", " Capítulo 4 Día 2 - Sesión 1- Fundamentos de la inferencia Bayesiana en R y STAN El proyecto Manhattan y la estimación desagregada con encuestas de hogares "],["día-2---sesión-1--modelos-sintéticos-simples.html", "Capítulo 5 Día 2 - Sesión 1- Modelos sintéticos simples ", " Capítulo 5 Día 2 - Sesión 1- Modelos sintéticos simples "],["regla-de-bayes.html", "5.1 Regla de Bayes", " 5.1 Regla de Bayes En términos de inferencia para \\(\\boldsymbol{\\theta}\\), es necesario encontrar la distribución de los parámetros condicionada a la observación de los datos. Para este fin, es necesario definir la distribución conjunta de la variable de interés con el vector de parámetros. \\[ p(\\boldsymbol{\\theta},\\mathbf{Y})=p(\\boldsymbol{\\theta})p(\\mathbf{Y} \\mid \\boldsymbol{\\theta}) \\] La distribución \\(p(\\boldsymbol{\\theta})\\) se le conoce con el nombre de distribución previa. El término \\(p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})\\) es la distribución de muestreo, verosimilitud o distribución de los datos. La distribución del vector de parámetros condicionada a los datos observados está dada por \\[ p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})=\\frac{p(\\boldsymbol{\\theta},\\mathbf{Y})}{p(\\mathbf{Y})}=\\frac{p(\\boldsymbol{\\theta})p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})}{p(\\mathbf{Y})} \\] A la distribución \\(p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})\\) se le conoce con el nombre de distribución posterior. Nótese que el denominador no depende del vector de parámetros y considerando a los datos observados como fijos, corresponde a una constante y puede ser obviada. Por lo tanto, otra representación de la regla de Bayes está dada por \\[ p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})\\propto p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})p(\\boldsymbol{\\theta}) \\] "],["inferencia-bayesiana..html", "5.2 Inferencia Bayesiana.", " 5.2 Inferencia Bayesiana. En términos de estimación, inferencia y predicción, el enfoque Bayesiano supone dos momentos o etapas: Antes de la recolección de las datos, en donde el investigador propone, basado en su conocimiento, experiencia o fuentes externas, una distribución de probabilidad previa para el parámetro de interés. Después de la recolección de los datos. Siguiendo el teorema de Bayes, el investigador actualiza su conocimiento acerca del comportamiento probabilístico del parámetro de interés mediante la distribución posterior de este. "],["modelos-uniparamétricos.html", "5.3 Modelos uniparamétricos", " 5.3 Modelos uniparamétricos Los modelos que están definidos en términos de un solo parámetro que pertenece al conjunto de los números reales se definen como modelos uniparamétricos. 5.3.1 Modelo de unidad: Bernoulli Suponga que \\(Y\\) es una variable aleatoria con distribución Bernoulli dada por: \\[ p(Y \\mid \\theta)=\\theta^y(1-\\theta)^{1-y}I_{\\{0,1\\}}(y) \\] Como el parámetro \\(\\theta\\) está restringido al espacio \\(\\Theta=[0,1]\\), entonces es posible formular varias opciones para la distribución previa del parámetro. En particular, la distribución uniforme restringida al intervalo \\([0,1]\\) o la distribución Beta parecen ser buenas opciones. Puesto que la distribución uniforme es un caso particular de la distribución Beta. Por lo tanto la distribución previa del parámetro \\(\\theta\\) estará dada por \\[ \\begin{equation} p(\\theta \\mid \\alpha,\\beta)= \\frac{1}{Beta(\\alpha,\\beta)}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}I_{[0,1]}(\\theta). \\end{equation} \\] y la distribución posterior del parámetro \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta \\mid Y \\sim Beta(y+\\alpha,\\beta-y+1) \\end{equation*} \\] Cuando se tiene una muestra aleatoria \\(Y_1,\\ldots,Y_n\\) de variables con distribución Bernoulli de parámetro \\(\\theta\\), entonces la distribución posterior del parámetro de interés es \\[ \\begin{equation*} \\theta \\mid Y_1,\\ldots,Y_n \\sim Beta\\left(\\sum_{i=1}^ny_i+\\alpha,\\beta-\\sum_{i=1}^ny_i+n\\right) \\end{equation*} \\] Obejtivo Estimar la proporción de personas que están por debajo de la linea pobreza. Es decir, \\[ P = \\frac{\\sum_{U}y_i}{N} \\] donde \\(y_i\\) toma el valor de 1 cuando el ingreso de la persona es menor a la linea de pobreza 0 en caso contrario El estimador de \\(P\\) esta dado por: \\[ \\hat{P} = \\frac{\\sum_{s}w_{i}y_{i}}{\\sum_{s}{w_{i} }} \\] con \\(w_i\\) el factor de expansión para la \\(i-ésima\\) observación. Además, y obtener \\(\\widehat{Var}\\left(\\hat{P}\\right)\\). 5.3.1.1 Práctica en R library(tidyverse) encuesta &lt;- readRDS(&quot;Recursos/Día2/Sesion1/Data/encuestaDOM21N1.rds&quot;) Sea \\(Y\\) la variable aleatoria \\[ Y_{i}=\\begin{cases} 1 &amp; ingreso&lt;lp\\\\ 0 &amp; ingreso\\geq lp \\end{cases} \\] El tamaño de la muestra es de 6796 en la dam 1 datay &lt;- encuesta %&gt;% filter(dam_ee == 1) %&gt;% transmute(y = ifelse(ingcorte &lt; lp, 1,0)) addmargins(table(datay$y)) 0 1 Sum 5063 1733 6796 Un grupo de estadístico experto decide utilizar una distribución previa Beta, definiendo los parámetros de la distribución previa como \\(Beta(\\alpha=1, \\beta=1)\\). La distribución posterior del parámetro de interés, que representa la probabilidad de estar por debajo de la linea de pobreza, es \\(Beta(1733 + 1, 1 - 1733 + 6796)=Beta(1734, 5064)\\) Figura 5.1: Distribución previa (línea roja) y distribución posterior (línea negra) La estimación del parámetro estaría dado por: \\[ E(X) = \\frac{\\alpha}{\\alpha + \\beta} = \\frac{1734}{1734+ 5064} = 0.255075 \\] luego, el intervalo de credibilidad para la distribución posterior es. n = length(datay$y) n1 = sum(datay$y) qbeta(c(0.025, 0.975), shape1 = 1 + n1, shape2 = 1 - n1 + n) ## [1] 0.2447824 0.2655041 5.3.1.2 Práctica en STAN En STAN es posible obtener el mismo tipo de inferencia creando cuatro cadenas cuya distribución de probabilidad coincide con la distribución posterior del ejemplo. data { // Entrada el modelo int&lt;lower=0&gt; n; // Numero de observaciones int y[n]; // Vector de longitud n real a; real b; } parameters { // Definir parámetro real&lt;lower=0, upper=1&gt; theta; } model { // Definir modelo y ~ bernoulli(theta); theta ~ beta(a, b); // Distribución previa } generated quantities { real ypred[n]; // vector de longitud n for (ii in 1:n){ ypred[ii] = bernoulli_rng(theta); } } Para compilar STAN debemos definir los parámetros de entrada sample_data &lt;- list(n = nrow(datay), y = datay$y, a = 1, b = 1) Para ejecutar STAN en R tenemos la librería rstan library(rstan) Bernoulli &lt;- &quot;Recursos/Día2/Sesion1/Data/modelosStan/1Bernoulli.stan&quot; options(mc.cores = parallel::detectCores()) rstan::rstan_options(auto_write = TRUE) # speed up running time model_Bernoulli &lt;- stan( file = Bernoulli, # Stan program data = sample_data, # named list of data verbose = FALSE, warmup = 500, # number of warmup iterations per chain iter = 1000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) ) saveRDS(model_Bernoulli, file = &quot;Recursos/Día2/Sesion1/0Recursos/Bernoulli/model_Bernoulli.rds&quot;) model_Bernoulli &lt;- readRDS(&quot;Recursos/Día2/Sesion1/0Recursos/Bernoulli/model_Bernoulli.rds&quot;) La estimación del parámetro \\(\\theta\\) es: tabla_Ber1 &lt;- summary(model_Bernoulli, pars = &quot;theta&quot;)$summary tabla_Ber1 %&gt;% tba() mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat theta 0.255 2e-04 0.0053 0.2445 0.2515 0.255 0.2584 0.2657 703.8891 1.0011 Para observar las cadenas compilamos las lineas de código library(posterior) library(ggplot2) temp &lt;- as_draws_df(as.array(model_Bernoulli,pars = &quot;theta&quot;)) p1 &lt;- ggplot(data = temp, aes(x = theta))+ geom_density(color = &quot;blue&quot;, size = 2) + stat_function(fun = posterior1, args = list(y = datay$y), size = 2) + theme_bw(base_size = 20) + labs(x = latex2exp::TeX(&quot;\\\\theta&quot;), y = latex2exp::TeX(&quot;f(\\\\theta)&quot;)) #ggsave(filename = &quot;Recursos/Día2/Sesion1/0Recursos/Bernoulli/Bernoulli2.png&quot;,plot = p1) p1 Figura 5.2: Resultado con STAN (línea azul) y posterior teórica (línea negra) Para validar las cadenas library(bayesplot) library(patchwork) posterior_theta &lt;- as.array(model_Bernoulli, pars = &quot;theta&quot;) (mcmc_dens_chains(posterior_theta) + mcmc_areas(posterior_theta) ) / traceplot(model_Bernoulli, pars = &quot;theta&quot;, inc_warmup = T) Predicción de \\(Y\\) en cada una de las iteraciones de las cadenas. y_pred_B &lt;- as.array(model_Bernoulli, pars = &quot;ypred&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, 1:n] ppc_dens_overlay(y = datay$y, y_pred2) 5.3.2 Modelo de área: Binomial Cuando se dispone de una muestra aleatoria de variables con distribución Bernoulli \\(Y_1,\\ldots,Y_n\\), la inferencia Bayesiana se puede llevar a cabo usando la distribución Binomial, puesto que es bien sabido que la suma de variables aleatorias Bernoulli \\[ \\begin{equation*} S=\\sum_{i=1}^nY_i \\end{equation*} \\] sigue una distribución Binomial. Es decir: \\[ \\begin{equation} p(S \\mid \\theta)=\\binom{n}{s}\\theta^s(1-\\theta)^{n-s}I_{\\{0,1,\\ldots,n\\}}(s), \\end{equation} \\] Nótese que la distribución Binomial es un caso general para la distribución Bernoulli, cuando \\(n=1\\). Por lo tanto es natural suponer que distribución previa del parámetro \\(\\theta\\) estará dada por \\[ \\begin{equation} p(\\theta \\mid \\alpha,\\beta)= \\frac{1}{Beta(\\alpha,\\beta)}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}I_{[0,1]}(\\theta). \\end{equation} \\] La distribución posterior del parámetro \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta \\mid S \\sim Beta(s+\\alpha,\\beta-s+n) \\end{equation*} \\] Ahora, cuando se tiene una sucesión de variables aleatorias \\(S_1,\\ldots,S_d, \\ldots,S_D\\) independientes y con distribución \\(Binomial(n_d,\\theta_d)\\) para \\(d=1,\\ldots,K\\), entonces la distribución posterior del parámetro de interés \\(\\theta_d\\) es \\[ \\begin{equation*} \\theta_d \\mid s_d \\sim Beta\\left(s_d+\\alpha,\\ \\beta+ n_d- s_d\\right) \\end{equation*} \\] Obejtivo Estimar la proporción de personas que están por debajo de la linea pobreza en el \\(d-ésimo\\) dominio. Es decir, \\[ P_d = \\frac{\\sum_{U_d}y_{di}}{N_d} \\] donde \\(y_i\\) toma el valor de 1 cuando el ingreso de la persona es menor a la linea de pobreza 0 en caso contrario. El estimador de \\(P\\) esta dado por: \\[ \\hat{P_d} = \\frac{\\sum_{s_d}w_{di}y_{di}}{\\sum_{s_d}{w_{di} }} \\] con \\(w_{di}\\) el factor de expansión para la \\(i-ésima\\) observación en el \\(d-ésimo\\) dominio. 5.3.2.1 Práctica en STAN Sea \\(S_k\\) el conteo de personas en condición de pobreza en el \\(k-ésimo\\) departamento en la muestra. dataS &lt;- encuesta %&gt;% transmute( dam = dam_ee, y = ifelse(ingcorte &lt; lp, 1,0) ) %&gt;% group_by(dam) %&gt;% summarise(nd = n(), #Número de ensayos Sd = sum(y) #Número de éxito ) tba(dataS) dam nd Sd 1 6796 1733 2 1556 397 3 2013 979 4 2912 1093 5 466 125 6 1649 295 7 821 365 8 1199 268 9 2012 235 10 1200 561 11 2678 432 12 2543 744 13 2534 416 14 780 195 15 773 96 16 466 203 17 1059 214 18 2907 381 19 460 9 20 669 162 21 3381 1012 22 2318 625 23 2260 368 24 909 138 25 9011 1840 26 401 55 27 963 171 28 923 157 29 1619 675 30 478 84 31 346 80 32 17969 4554 Creando código de STAN data { int&lt;lower=0&gt; K; // Número de provincia int&lt;lower=0&gt; n[K]; // Número de ensayos int&lt;lower=0&gt; s[K]; // Número de éxitos real a; real b; } parameters { real&lt;lower=0, upper=1&gt; theta[K]; // theta_d|s_d } model { for(kk in 1:K) { s[kk] ~ binomial(n[kk], theta[kk]); } to_vector(theta) ~ beta(a, b); } generated quantities { real spred[K]; // vector de longitud K for(kk in 1:K){ spred[kk] = binomial_rng(n[kk],theta[kk]); } } Preparando el código de STAN Binomial2 &lt;- &quot;Recursos/Día2/Sesion1/Data/modelosStan/3Binomial.stan&quot; Organizando datos para STAN sample_data &lt;- list(K = nrow(dataS), s = dataS$Sd, n = dataS$nd, a = 1, b = 1) Para ejecutar STAN en R tenemos la librería rstan options(mc.cores = parallel::detectCores()) model_Binomial2 &lt;- stan( file = Binomial2, # Stan program data = sample_data, # named list of data verbose = FALSE, warmup = 500, # number of warmup iterations per chain iter = 1000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) ) saveRDS(model_Binomial2, &quot;Recursos/Día2/Sesion1/0Recursos/Binomial/model_Binomial2.rds&quot;) model_Binomial2 &lt;- readRDS(&quot;Recursos/Día2/Sesion1/0Recursos/Binomial/model_Binomial2.rds&quot;) La estimación del parámetro \\(\\theta\\) es: tabla_Bin1 &lt;-summary(model_Binomial2, pars = &quot;theta&quot;)$summary tabla_Bin1 %&gt;% tba() mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat theta[1] 0.2550 1e-04 0.0054 0.2443 0.2514 0.2549 0.2586 0.2663 5541.426 0.9984 theta[2] 0.2557 2e-04 0.0111 0.2346 0.2480 0.2555 0.2633 0.2775 4685.553 0.9988 theta[3] 0.4863 2e-04 0.0112 0.4639 0.4790 0.4863 0.4937 0.5081 4275.709 0.9995 theta[4] 0.3754 1e-04 0.0090 0.3578 0.3692 0.3756 0.3815 0.3930 4356.266 0.9993 theta[5] 0.2688 3e-04 0.0210 0.2310 0.2543 0.2682 0.2831 0.3099 5505.855 0.9987 theta[6] 0.1792 1e-04 0.0095 0.1612 0.1729 0.1790 0.1858 0.1983 5539.281 0.9985 theta[7] 0.4447 3e-04 0.0172 0.4108 0.4336 0.4445 0.4562 0.4795 4289.643 0.9989 theta[8] 0.2240 2e-04 0.0115 0.2019 0.2161 0.2238 0.2315 0.2470 4261.208 0.9993 theta[9] 0.1172 1e-04 0.0077 0.1023 0.1121 0.1170 0.1222 0.1328 3835.345 0.9994 theta[10] 0.4673 2e-04 0.0142 0.4402 0.4577 0.4671 0.4769 0.4949 5121.700 0.9992 theta[11] 0.1617 1e-04 0.0071 0.1483 0.1568 0.1614 0.1667 0.1760 5501.146 0.9983 theta[12] 0.2930 1e-04 0.0089 0.2759 0.2870 0.2928 0.2988 0.3105 4834.824 0.9987 theta[13] 0.1644 1e-04 0.0073 0.1503 0.1595 0.1643 0.1691 0.1788 5452.961 0.9981 theta[14] 0.2505 2e-04 0.0148 0.2216 0.2404 0.2505 0.2598 0.2813 3949.950 0.9985 theta[15] 0.1253 2e-04 0.0120 0.1024 0.1170 0.1250 0.1334 0.1484 3561.371 0.9985 theta[16] 0.4359 3e-04 0.0228 0.3920 0.4206 0.4356 0.4507 0.4811 4413.229 0.9989 theta[17] 0.2030 2e-04 0.0122 0.1803 0.1949 0.2024 0.2106 0.2285 3553.277 0.9984 theta[18] 0.1313 1e-04 0.0061 0.1193 0.1272 0.1313 0.1355 0.1428 3265.019 0.9987 theta[19] 0.0217 1e-04 0.0068 0.0105 0.0168 0.0211 0.0258 0.0367 4589.526 0.9989 theta[20] 0.2427 3e-04 0.0163 0.2119 0.2310 0.2426 0.2539 0.2754 3692.533 0.9985 theta[21] 0.2995 1e-04 0.0081 0.2833 0.2941 0.2995 0.3047 0.3152 4654.262 0.9994 theta[22] 0.2701 1e-04 0.0091 0.2520 0.2642 0.2701 0.2759 0.2884 4987.638 0.9986 theta[23] 0.1630 1e-04 0.0080 0.1477 0.1573 0.1628 0.1684 0.1788 3848.725 0.9985 theta[24] 0.1524 2e-04 0.0114 0.1310 0.1442 0.1522 0.1603 0.1752 3602.961 0.9989 theta[25] 0.2042 1e-04 0.0041 0.1964 0.2014 0.2041 0.2070 0.2122 4184.041 0.9995 theta[26] 0.1388 3e-04 0.0177 0.1069 0.1265 0.1381 0.1505 0.1760 4957.831 0.9985 theta[27] 0.1783 2e-04 0.0118 0.1560 0.1700 0.1783 0.1863 0.2028 4550.942 0.9987 theta[28] 0.1706 2e-04 0.0125 0.1467 0.1618 0.1705 0.1796 0.1950 4629.408 0.9993 theta[29] 0.4171 2e-04 0.0126 0.3926 0.4084 0.4168 0.4257 0.4418 5023.648 0.9989 theta[30] 0.1772 3e-04 0.0176 0.1442 0.1651 0.1764 0.1884 0.2137 4571.020 0.9988 theta[31] 0.2328 4e-04 0.0227 0.1895 0.2177 0.2324 0.2477 0.2811 4051.155 0.9993 theta[32] 0.2535 1e-04 0.0032 0.2473 0.2514 0.2535 0.2557 0.2597 3530.149 0.9992 Para validar las cadenas (s1 &lt;- mcmc_areas(as.array(model_Binomial2, pars = &quot;theta&quot;))) # ggsave(filename = &quot;Recursos/Día2/Sesion1/0Recursos/Binomial/Binomial1.png&quot;,plot = s1) (s2 &lt;- mcmc_trace(as.array(model_Binomial2, pars = &quot;theta&quot;))) # ggsave(filename = &quot;Recursos/Día2/Sesion1/0Recursos/Binomial/Binomial2.png&quot;, # plot = s2,width = 20, height = 20, units = &quot;cm&quot;) y_pred_B &lt;- as.array(model_Binomial2, pars = &quot;spred&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 200) y_pred2 &lt;- y_pred_B[rowsrandom, ] g1 &lt;- ggplot(data = dataS, aes(x = Sd))+ geom_histogram(aes(y = ..density..)) + geom_density(size = 2, color = &quot;blue&quot;) + labs(y = &quot;&quot;)+ theme_bw(10) + yaxis_title(FALSE) + xaxis_title(FALSE) + yaxis_text(FALSE) + yaxis_ticks(FALSE) g2 &lt;- ppc_dens_overlay(y = dataS$Sd, y_pred2) g1/g2 5.3.3 Modelo de unidad: Normal con media desconocida Suponga que \\(Y_1,\\cdots,Y_n\\) son variables independientes e idénticamente distribuidos con distribución \\(Normal(\\theta,\\sigma^2)\\) con \\(\\theta\\) desconocido pero \\(\\sigma^2\\) conocido. De esta forma, la función de verosimilitud de los datos está dada por \\[ \\begin{align*} p(\\mathbf{Y} \\mid \\theta) &amp;=\\prod_{i=1}^n\\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left\\{-\\frac{1}{2\\sigma^2}(y_i-\\theta)^2\\right\\}I_\\mathbb{R}(y) \\\\ &amp;=(2\\pi\\sigma^2)^{-n/2}\\exp\\left\\{-\\frac{1}{2\\sigma^2}\\sum_{i=1}^n(y_i-\\theta)^2\\right\\} \\end{align*} \\] Como el parámetro \\(\\theta\\) puede tomar cualquier valor en los reales, es posible asignarle una distribución previa \\(\\theta \\sim Normal(\\mu,\\tau^2)\\). Bajo este marco de referencia se tienen los siguientes resultados La distribución posterior del parámetro de interés \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta|\\mathbf{Y} \\sim Normal(\\mu_n,\\tau^2_n) \\end{equation*} \\] En donde \\[ \\begin{equation} \\mu_n=\\frac{\\frac{n}{\\sigma^2}\\bar{Y}+\\frac{1}{\\tau^2}\\mu}{\\frac{n}{\\sigma^2}+\\frac{1}{\\tau^2}} \\ \\ \\ \\ \\ \\ \\ \\text{y} \\ \\ \\ \\ \\ \\ \\ \\tau_n^2=\\left(\\frac{n}{\\sigma^2}+\\frac{1}{\\tau^2}\\right)^{-1} \\end{equation} \\] Obejtivo Estimar el ingreso medio de la población, es decir, \\[ \\bar{Y} = \\frac{\\sum_Uy_i}{N} \\] donde, \\(y_i\\) es el ingreso de las personas. El estimador de \\(\\bar{Y}\\) esta dado por \\[ \\hat{\\bar{Y}} = \\frac{\\sum_{s}w_{i}y_{i}}{\\sum_s{w_i}} \\] y obtener \\(\\widehat{Var}\\left(\\hat{\\bar{Y}}\\right)\\). 5.3.3.1 Práctica en STAN Sea \\(Y\\) el logaritmo del ingreso dataNormal &lt;- encuesta %&gt;% transmute( dam_ee , logIngreso = log(ingcorte +1)) %&gt;% filter(dam_ee == 1) #3 media &lt;- mean(dataNormal$logIngreso) Sd &lt;- sd(dataNormal$logIngreso) g1 &lt;- ggplot(dataNormal,aes(x = logIngreso))+ geom_density(size = 2, color = &quot;blue&quot;) + stat_function(fun =dnorm, args = list(mean = media, sd = Sd), size =2) + theme_bw(base_size = 20) + labs(y = &quot;&quot;, x = (&quot;Log(Ingreso)&quot;)) g2 &lt;- ggplot(dataNormal, aes(sample = logIngreso)) + stat_qq() + stat_qq_line() + theme_bw(base_size = 20) g1|g2 Creando código de STAN data { int&lt;lower=0&gt; n; // Número de observaciones real y[n]; // LogIngreso real &lt;lower=0&gt; Sigma; // Desviación estándar } parameters { real theta; } model { y ~ normal(theta, Sigma); theta ~ normal(0, 1000); // Distribución previa } generated quantities { real ypred[n]; // Vector de longitud n for(kk in 1:n){ ypred[kk] = normal_rng(theta,Sigma); } } Preparando el código de STAN NormalMedia &lt;- &quot;Recursos/Día2/Sesion1/Data/modelosStan/4NormalMedia.stan&quot; Organizando datos para STAN sample_data &lt;- list(n = nrow(dataNormal), Sigma = sd(dataNormal$logIngreso), y = dataNormal$logIngreso) Para ejecutar STAN en R tenemos la librería rstan options(mc.cores = parallel::detectCores()) model_NormalMedia &lt;- stan( file = NormalMedia, data = sample_data, verbose = FALSE, warmup = 500, iter = 1000, cores = 4 ) saveRDS(model_NormalMedia, &quot;Recursos/Día2/Sesion1/0Recursos/Normal/model_NormalMedia.rds&quot;) model_NormalMedia &lt;- readRDS(&quot;Recursos/Día2/Sesion1/0Recursos/Normal/model_NormalMedia.rds&quot;) La estimación del parámetro \\(\\theta\\) es: tabla_Nor1 &lt;- summary(model_NormalMedia, pars = &quot;theta&quot;)$summary tabla_Nor1 %&gt;% tba() mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat theta 9.0982 4e-04 0.0095 9.0786 9.0917 9.0985 9.1046 9.1167 654.8346 1.0008 posterior_theta &lt;- as.array(model_NormalMedia, pars = &quot;theta&quot;) (mcmc_dens_chains(posterior_theta) + mcmc_areas(posterior_theta) ) / mcmc_trace(posterior_theta) y_pred_B &lt;- as.array(model_NormalMedia, pars = &quot;ypred&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(dataNormal$logIngreso), y_pred2)/ ppc_dens_overlay(y = exp(as.numeric(dataNormal$logIngreso))-1, exp(y_pred2)-1) + xlim(0,240000) "],["modelos-multiparamétricos.html", "5.4 Modelos multiparamétricos", " 5.4 Modelos multiparamétricos La distribución normal univariada que tiene dos parámetros: la media \\(\\theta\\) y la varianza \\(\\sigma^2\\). La distribución multinomial cuyo parámetro es un vector de probabilidades \\(\\boldsymbol{\\theta}\\). 5.4.1 Modelo de unidad: Normal con media y varianza desconocida Supongamos que se dispone de realizaciones de un conjunto de variables independientes e idénticamente distribuidas \\(Y_1,\\cdots,Y_n\\sim N(\\theta,\\sigma^2)\\). Cuando se desconoce tanto la media como la varianza de la distribución es necesario plantear diversos enfoques y situarse en el más conveniente, según el contexto del problema. En términos de la asignación de las distribuciones previas para \\(\\theta\\) y \\(\\sigma^2\\) es posible: Suponer que la distribución previa \\(p(\\theta)\\) es independiente de la distribución previa \\(p(\\sigma^2)\\) y que ambas distribuciones son informativas. Suponer que la distribución previa \\(p(\\theta)\\) es independiente de la distribución previa \\(p(\\sigma^2)\\) y que ambas distribuciones son no informativas. Suponer que la distribución previa para \\(\\theta\\) depende de \\(\\sigma^2\\) y escribirla como \\(p(\\theta \\mid \\sigma^2)\\), mientras que la distribución previa de \\(\\sigma^2\\) no depende de \\(\\theta\\) y se puede escribir como \\(p(\\sigma^2)\\). La distribución previa para el parámetro \\(\\theta\\) será \\[ \\begin{equation*} \\theta \\sim Normal(0,10000) \\end{equation*} \\] Y la distribución previa para el parámetro \\(\\sigma^2\\) será \\[ \\begin{equation*} \\sigma^2 \\sim IG(0.0001,0.0001) \\end{equation*} \\] La distribución posterior condicional de \\(\\theta\\) es \\[ \\begin{equation} \\theta \\mid \\sigma^2,\\mathbf{Y} \\sim Normal(\\mu_n,\\tau_n^2) \\end{equation} \\] En donde las expresiones para \\(\\mu_n\\) y \\(\\tau_n^2\\) están dados previamente. En el siguiente enlace enconará el libro: Modelos Bayesianos con R y STAN donde puede profundizar en el desarrollo matemático de los resultados anteriores. Obejtivo Estimar el ingreso medio de las personas, es decir, \\[ \\bar{Y} = \\frac{\\sum_Uy_i}{N} \\] donde, \\(y_i\\) es el ingreso de las personas. El estimador de \\(\\bar{Y}\\) esta dado por \\[ \\hat{\\bar{Y}} = \\frac{\\sum_{s}w_{i}y_{i}}{\\sum_s{w_i}} \\] y obtener \\(\\widehat{Var}\\left(\\hat{\\bar{Y}}\\right)\\). 5.4.1.1 Práctica en STAN Sea \\(Y\\) el logaritmo del ingreso dataNormal &lt;- encuesta %&gt;% transmute(dam_ee, logIngreso = log(ingcorte +1)) %&gt;% filter(dam_ee == 1) Creando código de STAN data { int&lt;lower=0&gt; n; real y[n]; } parameters { real sigma; real theta; } transformed parameters { real sigma2; sigma2 = pow(sigma, 2); } model { y ~ normal(theta, sigma); theta ~ normal(0, 1000); sigma2 ~ inv_gamma(0.001, 0.001); } generated quantities { real ypred[n]; // vector de longitud n for(kk in 1:n){ ypred[kk] = normal_rng(theta,sigma); } } Preparando el código de STAN NormalMeanVar &lt;- &quot;Recursos/Día2/Sesion1/Data/modelosStan/5NormalMeanVar.stan&quot; Organizando datos para STAN sample_data &lt;- list(n = nrow(dataNormal), y = dataNormal$logIngreso) Para ejecutar STAN en R tenemos la librería rstan options(mc.cores = parallel::detectCores()) model_NormalMedia &lt;- stan( file = NormalMeanVar, data = sample_data, verbose = FALSE, warmup = 500, iter = 1000, cores = 4 ) saveRDS(model_NormalMedia,&quot;Recursos/Día2/Sesion1/0Recursos/Normal/model_NormalMedia2.rds&quot;) model_NormalMedia &lt;- readRDS(&quot;Recursos/Día2/Sesion1/0Recursos/Normal/model_NormalMedia2.rds&quot;) La estimación del parámetro \\(\\theta\\) y \\(\\sigma^2\\) es: tabla_Nor2 &lt;- summary(model_NormalMedia, pars = c(&quot;theta&quot;, &quot;sigma2&quot;, &quot;sigma&quot;))$summary tabla_Nor2 %&gt;% tba() mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat theta 9.0991 3e-04 0.0099 9.0801 9.0924 9.0989 9.1057 9.1189 1569.114 1.0002 sigma2 0.6318 2e-04 0.0108 0.6101 0.6244 0.6314 0.6392 0.6531 1935.498 0.9991 sigma 0.7948 2e-04 0.0068 0.7811 0.7902 0.7946 0.7995 0.8081 1935.196 0.9991 posterior_theta &lt;- as.array(model_NormalMedia, pars = &quot;theta&quot;) (mcmc_dens_chains(posterior_theta) + mcmc_areas(posterior_theta) ) / mcmc_trace(posterior_theta) posterior_sigma2 &lt;- as.array(model_NormalMedia, pars = &quot;sigma2&quot;) (mcmc_dens_chains(posterior_sigma2) + mcmc_areas(posterior_sigma2) ) / mcmc_trace(posterior_sigma2) posterior_sigma &lt;- as.array(model_NormalMedia, pars = &quot;sigma&quot;) (mcmc_dens_chains(posterior_sigma) + mcmc_areas(posterior_sigma) ) / mcmc_trace(posterior_sigma) y_pred_B &lt;- as.array(model_NormalMedia, pars = &quot;ypred&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(exp(dataNormal$logIngreso)-1), y_pred2) + xlim(0,240000) 5.4.2 Modelo Multinomial En esta sección discutimos el modelamiento bayesiano de datos provenientes de una distribución multinomial que corresponde a una extensión multivariada de la distribución binomial. Suponga que \\(\\textbf{Y}=(Y_1,\\ldots,Y_p)&#39;\\) es un vector aleatorio con distribución multinomial, así, su distribución está parametrizada por el vector \\(\\boldsymbol{\\theta}=(\\theta_1,\\ldots,\\theta_p)&#39;\\) y está dada por la siguiente expresión \\[ \\begin{equation} p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})=\\binom{n}{y_1,\\ldots,y_p}\\prod_{i=1}^p\\theta_i^{y_i} \\ \\ \\ \\ \\ \\theta_i&gt;0 \\texttt{ , } \\sum_{i=1}^py_i=n \\texttt{ y } \\sum_{i=1}^p\\theta_i=1 \\end{equation} \\] Donde \\[ \\begin{equation*} \\binom{n}{y_1,\\ldots,y_p}=\\frac{n!}{y_1!\\cdots y_p!}. \\end{equation*} \\] Como cada parámetro \\(\\theta_i\\) está restringido al espacio \\(\\Theta=[0,1]\\), entonces es posible asignar a la distribución de Dirichlet como la distribución previa del vector de parámetros. Por lo tanto la distribución previa del vector de parámetros \\(\\boldsymbol{\\theta}\\), parametrizada por el vector de hiperparámetros \\(\\boldsymbol{\\alpha}=(\\alpha_1,\\ldots,\\alpha_p)&#39;\\), está dada por \\[ \\begin{equation} p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\alpha})=\\frac{\\Gamma(\\alpha_1+\\cdots+\\alpha_p)}{\\Gamma(\\alpha_1)\\cdots\\Gamma(\\alpha_p)} \\prod_{i=1}^p\\theta_i^{\\alpha_i-1} \\ \\ \\ \\ \\ \\alpha_i&gt;0 \\texttt{ y } \\sum_{i=1}^p\\theta_i=1 \\end{equation} \\] La distribución posterior del parámetro \\(\\boldsymbol{\\theta}\\) sigue una distribución \\(Dirichlet(y_1+\\alpha_1,\\ldots,y_p+\\alpha_p)\\) Obejtivo Sea \\(N_1\\) el número de personas ocupadas, \\(N_2\\) Número de personas desocupadas, \\(N_3\\) es el número de personas inactivas en la población y \\(N = N_1 +N_2 + N_3\\). Entonces el objetivo es estimar el vector de parámetros \\(\\boldsymbol{P}=\\left(P_{1},P_{2},P_{3}\\right)\\), con \\(P_{k}=\\frac{N_{k}}{N}\\), para \\(k=1,2,3\\), El estimador de \\(\\boldsymbol{P}\\) esta dado por \\[ \\hat{\\boldsymbol{P}} =\\left(\\hat{P}_{1},\\hat{P}_{2},\\hat{P}_{3}\\right) \\] donde, \\[ \\hat{P}_{k} = \\frac{\\sum_{s}w_{i}y_{ik}}{\\sum_s{w_i}} = \\frac{\\hat{N}_k}{\\hat{N}} \\] y \\(y_{ik}\\) toma el valor 1 cuando la \\(i-ésima\\) persona responde la \\(k-ésima\\) categoría (Ocupado o Desocupado o Inactivo). Además, obtener \\(\\widehat{Var}\\left(\\hat{P}_{k}\\right)\\). 5.4.2.1 Práctica en STAN Sea \\(Y\\) condición de actividad laboral dataMult &lt;- encuesta %&gt;% filter(condact3 %in% 1:3) %&gt;% transmute( empleo = as_factor(condact3)) %&gt;% group_by(empleo) %&gt;% tally() %&gt;% mutate(theta = n/sum(n)) tba(dataMult) empleo n theta Ocupado 33047 0.5267 Desocupado 2371 0.0378 Inactivo 27324 0.4355 donde 1 corresponde a Ocupado, 2 son los Desocupado y 3 son Inactivo Creando código de STAN data { int&lt;lower=0&gt; k; // Número de cátegoria int y[k]; // Número de exitos vector[k] alpha; // Parámetro de las distribción previa } parameters { simplex[k] theta; } transformed parameters { real delta; // Tasa de desocupación delta = theta[2]/ (theta[2] + theta[1]); // (Desocupado)/(Desocupado + Ocupado) } model { y ~ multinomial(theta); theta ~ dirichlet(alpha); } generated quantities { int ypred[k]; ypred = multinomial_rng(theta, sum(y)); } Preparando el código de STAN Multinom &lt;- &quot;Recursos/Día2/Sesion1/Data/modelosStan/6Multinom.stan&quot; Organizando datos para STAN sample_data &lt;- list(k = nrow(dataMult), y = dataMult$n, alpha = c(0.5, 0.5, 0.5)) Para ejecutar STAN en R tenemos la librería rstan options(mc.cores = parallel::detectCores()) model_Multinom &lt;- stan( file = Multinom, data = sample_data, verbose = FALSE, warmup = 500, iter = 1000, cores = 4 ) saveRDS(model_Multinom, &quot;Recursos/Día2/Sesion1/0Recursos/Multinomial/model_Multinom.rds&quot;) model_Multinom &lt;- readRDS(&quot;Recursos/Día2/Sesion1/0Recursos/Multinomial/model_Multinom.rds&quot;) La estimación del parámetro \\(\\theta\\) y \\(\\delta\\) es: tabla_Mul1 &lt;- summary(model_Multinom, pars = c(&quot;delta&quot;, &quot;theta&quot;))$summary tabla_Mul1 %&gt;% tba() mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat delta 0.0670 0 0.0013 0.0644 0.0661 0.0670 0.0679 0.0695 1414.051 1.0014 theta[1] 0.5268 0 0.0019 0.5231 0.5255 0.5268 0.5280 0.5305 1692.834 0.9989 theta[2] 0.0378 0 0.0008 0.0363 0.0373 0.0378 0.0383 0.0393 1379.738 1.0018 theta[3] 0.4354 0 0.0019 0.4317 0.4341 0.4354 0.4367 0.4392 1633.676 0.9997 posterior_theta1 &lt;- as.array(model_Multinom, pars = &quot;theta[1]&quot;) (mcmc_dens_chains(posterior_theta1) + mcmc_areas(posterior_theta1) ) / mcmc_trace(posterior_theta1) posterior_theta2 &lt;- as.array(model_Multinom, pars = &quot;theta[2]&quot;) (mcmc_dens_chains(posterior_theta2) + mcmc_areas(posterior_theta2) ) / mcmc_trace(posterior_theta2) posterior_theta3 &lt;- as.array(model_Multinom, pars = &quot;theta[3]&quot;) (mcmc_dens_chains(posterior_theta3) + mcmc_areas(posterior_theta3) ) / mcmc_trace(posterior_theta3) posterior_delta &lt;- as.array(model_Multinom, pars = &quot;delta&quot;) (mcmc_dens_chains(posterior_delta) + mcmc_areas(posterior_delta) ) / mcmc_trace(posterior_delta) La imagen es muy pesada no se carga al repositorio. n &lt;- nrow(dataMult) y_pred_B &lt;- as.array(model_Multinom, pars = &quot;ypred&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, 1:n] ppc_dens_overlay(y = as.numeric(dataMult$n), y_pred2) "],["día-2---sesión-1--estimaciones-encft-y-función-generalizada-de-varianza.html", "Capítulo 6 Día 2 - Sesión 1- Estimaciones ENCFT y Función Generalizada de Varianza", " Capítulo 6 Día 2 - Sesión 1- Estimaciones ENCFT y Función Generalizada de Varianza Uno de los insumos más importantes en el modelo de áreas es la varianza del estimador directo, a nivel de dominio, la cual no puede calcularse de ningún modo. En correspondencia, este valor debe estimarse desde los datos recolectados en cada dominio. Sin embargo, en dominios en las que se cuenta con un tamaño de muestra muy pequeño, estas estimaciones no tendrán un buen comportamiento. Por ende, es muy útil utilizar un modelo de suavizamiento de las varianzas para eliminar el ruido y la volatilidad de estas estimaciones y extraer la verdadera señal del proceso Hidiroglou (2019) afirma que \\(E_{\\mathscr{MP}}\\left(\\hat{\\theta}^{dir}_d\\right)=\\boldsymbol{x}^{T}_{d}\\boldsymbol{\\beta}\\) y \\(V_{\\mathscr{MP}}\\left(\\hat{\\theta}^{dir}_d\\right)=\\sigma_{u}^2+\\tilde{\\sigma}^2_{d}\\), en donde el subíndice \\(\\mathscr{MP}\\) hace referencia a la inferencia doble que se debe tener en cuenta en este tipo de ajustes y define la medida de probabilidad conjunta entre el modelo y el diseño de muestreo. \\(\\mathscr{M}\\) hace referencia a la medida de probabilidad inducida por el modelamiento y la inclusión de las covariables auxiliares (\\(\\boldsymbol{x}_{d}\\)). \\(\\mathscr{P}\\) hace referencia a la medida de probabilidad inducida por el diseño de muestreo complejo que induce las estimaciones directas. La solución que acá se plantea se conoce con el nombre de Función Generalizada de Varianza, la cual consiste en ajustar un modelo log-lineal a la varianza directa estimada. Partiendo del hecho de que se tiene acceso a un estimador insesgado de \\(\\sigma^2\\), denotado por \\(\\hat{\\sigma}^2\\) se tiene que: \\[ E_{\\mathscr{MP}}\\left(\\hat{\\sigma}_{d}^{2}\\right)=E_{\\mathscr{M}}\\left(E_{\\mathscr{P}}\\left(\\hat{\\sigma}_{d}^{2}\\right)\\right)=E_{\\mathscr{M}}\\left(\\sigma_{d}^{2}\\right)=\\tilde{\\sigma}_{d}^{2} \\] La anterior igualdad puede interpretarse como que un estimador insesgado y simple de \\(\\tilde{\\sigma}_{d}^{2}\\) puede ser \\(\\hat{\\sigma}_{d}^{2}\\). Sin embargo, este estimador de muestreo es inestable cuando el tamaño de muestra es pequeño, que es justo el paradigma dominante en la estimación de áreas pequeñas. Rivest and Belmonte (2000) consideran modelos de suavizamiento para la estimación de las varianzas directas definidos de la siguiente manera: \\[ \\log\\left(\\hat{\\sigma}_{d}^{2}\\right)=\\boldsymbol{z}_{d}^{T}\\boldsymbol{\\alpha}+\\boldsymbol{\\varepsilon}_{d} \\] En donde \\(\\boldsymbol{z}_{d}\\) es un vector de covariables explicativas que son funciones de \\(\\boldsymbol{x}_{d}\\), \\(\\boldsymbol{\\alpha}\\) es un vector de parámetros que deben ser estimados, \\(\\boldsymbol{\\varepsilon}_{d}\\) son errores aleatorios con media cero y varianza constante, que se asumen idénticamente distribuidos condicionalmente sobre \\(\\boldsymbol{z}_{d}\\). Del anterior modelo, la estimación suavizada de la varianza de muestreo está dada por: \\[ \\tilde{\\sigma}_{d}^{2}=E_{\\mathscr{MP}}\\left(\\sigma_{d}^{2}\\right)=\\exp\\left(\\boldsymbol{z}_{d}^{T}\\boldsymbol{\\alpha}\\right)\\times\\Delta \\] En donde, \\(E_{\\mathscr{MP}}\\left(\\varepsilon_{d}\\right)=\\Delta\\). No hay necesidad de especificar una distribución paramétrica para los errores de este modelo. Al utilizar el método de los momentos, se tiene el siguiente estimador insesgado para \\(\\Delta\\): \\[ \\hat{\\Delta}=\\frac{\\sum_{d=1}^{D}\\hat{\\sigma}_{d}^{2}}{\\sum_{d=1}^{D}\\exp\\left(\\boldsymbol{z}_{d}^{T}\\boldsymbol{\\alpha}\\right)} \\] De la misma forma, al utilizar los procedimientos estándar en una regresión lineal, la estimación del coeficiente de parámetros de regresión está dada por la siguiente expresión: \\[ \\hat{\\boldsymbol{\\alpha}}=\\left(\\sum_{d=1}^{D}\\boldsymbol{z}_{d}\\boldsymbol{z}_{d}^{T}\\right)^{-1}\\sum_{d=1}^{D}\\boldsymbol{z}_{d}\\log\\left(\\hat{\\sigma}_{d}^{2}\\right) \\] Por último, el estimador suavizado de la varianza muestral está definido por: \\[ \\hat{\\tilde{\\sigma}}_{d}^{2}=\\exp\\left(\\boldsymbol{z}_{d}^{T}\\hat{\\boldsymbol{\\alpha}}\\right)\\hat{\\Delta} \\] "],["datos-de-la-encuesta.html", "6.1 Datos de la encuesta", " 6.1 Datos de la encuesta El siguiente bloque de código utiliza varias librerías en R (tidyverse y magrittr), así como también utiliza una función definida en otro archivo (source(“0Recursos/0Source_FH.R”)). Luego, el código carga la encuesta que esta almacenada en un archivo de datos en formato RDS y utiliza la función %&gt;% para encadenar una serie de transformaciones en los datos: transmute() se utiliza para seleccionar y renombrar columnas. En este caso, se seleccionan las columnas dam_ee, _fep,_upm y _estrato, y se re-nombran a dam, wkx, upm y _estrato, respectivamente. Se crea una nueva variable llamada pobreza que se establece en 1 si la variable ingcorte(ingreso percapital) es menor que la variable lp, y en 0 en caso contrario. library(tidyverse) library(magrittr) source(&quot;Recursos/Día2/Sesion2/0Recursos/0Source_FH.R&quot;) encuesta &lt;- readRDS(&quot;Recursos/Día2/Sesion2/Data/encuestaDOM21N1.rds&quot;) %&gt;% transmute( dam = haven::as_factor(dam_ee,levels = &quot;values&quot;), dam = str_pad(dam,width = 2,pad = &quot;0&quot;), dam2, wkx = `_fep`, upm = `_upm`, estrato = `_estrato`, pobreza = ifelse(ingcorte &lt; lp, 1 , 0)) dam: Corresponde al código asignado a la división administrativa mayor del país. dam2: Corresponde al código asignado a la segunda división administrativa del país. lp linea de pobreza definida por CEPAL. Factor de expansión por persona (wkx) dam dam2 wkx upm estrato pobreza 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 01 00101 137.0652 1 1 0 En el siguiente bloque de código utiliza las librerías survey y srvyr para crear un diseño de muestreo a partir de una base de datos de encuestas. El diseño de muestreo incluye información sobre las unidades primarias de muestreo (UPM), los pesos de muestreo (wkx), y los strata (estrato) utilizadas en el muestreo. Además, se utiliza la opción “survey.lonely.psu” para ajustar los tamaños de muestra en los grupos de unidades primarias de muestreo que no tienen otras unidades primarias de muestreo en el mismo grupo. library(survey) library(srvyr) options(survey.lonely.psu = &quot;adjust&quot;) diseno &lt;- as_survey_design( ids = upm, weights = wkx, strata = estrato, nest = TRUE, .data = encuesta ) summary(diseno) ## Stratified 1 - level Cluster Sampling design (with replacement) ## With (1056) clusters. ## Called via srvyr ## Probabilities: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000762 0.005899 0.007954 0.009216 0.010773 0.031841 ## Stratum Sizes: ## 1 2 3 4 5 6 7 8 9 10 11 12 13 ## obs 6796 15469 2500 6602 2409 2482 2437 2196 2170 1866 1692 1447 1156 ## design.PSU 127 235 35 90 30 35 30 30 25 30 24 20 15 ## actual.PSU 127 235 35 90 30 35 30 30 25 30 24 20 15 ## 14 15 16 17 18 19 20 21 22 23 ## obs 3578 2764 1808 1331 5036 1555 2757 1600 4774 1646 ## design.PSU 50 40 20 15 50 15 35 20 65 20 ## actual.PSU 50 40 20 15 50 15 35 20 65 20 ## Data variables: ## [1] &quot;dam&quot; &quot;dam2&quot; &quot;wkx&quot; &quot;upm&quot; &quot;estrato&quot; &quot;pobreza&quot; Para la estimación directa de la proporción se emplea la función direct.supr, disponible en el archivo 0Source_FH.R. Está función realiza las estimaciones y criterios de calidad en una encuesta de muestreo complejo con diseño estratificado y por conglomerados. Toma cinco argumentos: design.base, variable, group, upm y estrato. La función comienza cargando varios paquetes, como rlang, tidyverse, dplyr, survey y srvyr. Luego, los argumentos group, variable, upm y estrato se convierten en argumentos utilizando la función enquo. La función utiliza la encuesta de muestreo complejo design.base para calcular las estimaciones de los parámetros y los criterios de calidad. Utiliza la función survey_mean() de la librería survey para calcular la media y los intervalos de confianza de la variable de interés. La función también calcula otros indicadores de calidad, como el coeficiente de variación, el tamaño de muestra efectivo y el efecto del diseño. Luego, utiliza la función as.data.frame() para convertir los resultados en un objeto de marco de datos. Además, la función calcula otros criterios de calidad para determinar si las estimaciones son confiables. En particular, evalúa si se cumple un umbral mínimo para el número de grados de libertad, si la muestra es suficientemente grande y si el efecto del diseño es razonable. La función también tiene la opción de incluir o excluir ciertos grupos de muestreo basados en sus características. directodam2 &lt;- direct.supr(design.base = diseno, variable = pobreza, group = dam2, upm = upm, estrato = estrato) directodam2 %&gt;% group_by(Flag) %&gt;% summarise(n = n()) %&gt;% arrange(n) %&gt;% tba() # saveRDS(directodam2, &quot;Data/directodam2.rds&quot;) Flag n Excluir 64 Incluir 79 Para los dominios que no son excluidos se hace la transformación arcoseno, calculo del DEFF y varianza base_sae &lt;- directodam2 %&gt;% filter(Flag != &quot;Excluir&quot;) %&gt;% transmute( dam2 = dam2, # Id para los dominios nd = n, # Número de observaciones por dominios n_effec = n.eff, # n efectivo. pobreza = p, # Estimación de la variable pobreza_T = asin(sqrt(pobreza)), # Transformación arcoseno vardir = ee ^ 2, # Estimación de la varianza directa cv = CV, var_zd = 1 / (4 * n_effec), # Varianza para la tranformación arcsin deff_dam2 = deff # Deff por dominio ) # View(base_sae) tba(head(base_sae)) dam2 nd n_effec pobreza pobreza_T vardir cv var_zd deff_dam2 00101 6796 382.3874 0.2225 0.4912 0.0004 8.4371 0.0007 17.7726 00201 531 254.4720 0.1822 0.4409 0.0004 11.3979 0.0010 2.0867 00206 230 58.1282 0.3366 0.6190 0.0031 16.6251 0.0043 3.9568 00301 666 144.3395 0.4266 0.7117 0.0043 15.4187 0.0017 4.6141 00302 261 559.2612 0.4461 0.7314 0.0014 8.3930 0.0004 0.4667 00303 566 40.0367 0.5587 0.8442 0.0142 21.3212 0.0062 14.1370 seguidamente se realiza la transformación \\(\\log(\\hat{\\sigma}^2_d)\\), además se realiza la selección de las columnas identificador del municipio (dam2), la estimación directa (pobreza), El número de personas en el dominio (nd) y la varianza estimada del para la estimación directa vardir,siendo esta la que transforma mediante la función log(). baseFGV &lt;- base_sae %&gt;% select(dam2, pobreza, nd, vardir) %&gt;% mutate(ln_sigma2 = log(vardir)) "],["análisis-gráfico.html", "6.2 Análisis gráfico", " 6.2 Análisis gráfico El primer gráfico, p1, muestra una gráfica de dispersión de la variable ln_sigma2 en función de la variable pobreza, con una línea suave que representa una estimación de la tendencia. El eje x está etiquetado como pobreza. El segundo gráfico, p2, muestra una gráfica de dispersión de la variable ln_sigma2 en función de la variable nd, con una línea suave que representa una estimación de la tendencia. El eje x está etiquetado como Tamaño de muestra. El tercer gráfico, p3, muestra una gráfica de dispersión de la variable ln_sigma2 en función del producto de pobreza y nd, con una línea suave que representa una estimación de la tendencia. El eje x está etiquetado como Número de pobres. El cuarto gráfico, p4, muestra una gráfica de dispersión de la variable ln_sigma2 en función de la raíz cuadrada de la variable pobreza, con una línea suave que representa una estimación de la tendencia. El eje x está etiquetado como Raiz cuadrada de pobreza. En general, los gráficos estan diseñados para explorar la relación entre ln_sigma2 y diferentes variables independientes, como pobreza, nd, y la raíz cuadrada de la pobreza. La elección de utilizar la función “loess” para suavizar las líneas en lugar de una línea recta puede ayudar a visualizar mejor las tendencias generales en los datos. theme_set(theme_bw()) # pobreza vs Ln_sigma2 # p1 &lt;- ggplot(baseFGV, aes(x = pobreza, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;pobreza&quot;) # Tamaño de muestra vs Ln_sigma2 # p2 &lt;- ggplot(baseFGV, aes(x = nd, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Tamaño de muestra&quot;) # Número de pobres vs Ln_sigma2 # p3 &lt;- ggplot(baseFGV, aes(x = pobreza * nd, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Número de pobres&quot;) # Raiz_pobreza vs Ln_sigma2 # p4 &lt;- ggplot(baseFGV, aes(x = sqrt(pobreza), y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Raiz cuadrada de pobreza&quot;) library(patchwork) (p1 | p2) / (p3 | p4) "],["modelo-para-la-varianza.html", "6.3 Modelo para la varianza", " 6.3 Modelo para la varianza El código ajusta un modelo de regresión lineal múltiple (utilizando la función lm()), donde ln_sigma2 es la variable respuesta y las variables predictoras son pobreza, nd, y varias transformaciones de éstas. El objetivo de este modelo es estimar la función generalizada de varianza (FGV) para los dominios observados. library(gtsummary) FGV1 &lt;- lm(ln_sigma2 ~ pobreza + I(sqrt(nd)) + I(sqrt(pobreza)) + I(sqrt(nd^pobreza)) , data = baseFGV) tbl_regression(FGV1) %&gt;% add_glance_table(include = c(r.squared, adj.r.squared)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #reqrqxctgl .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #reqrqxctgl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #reqrqxctgl .gt_caption { padding-top: 4px; padding-bottom: 4px; } #reqrqxctgl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #reqrqxctgl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #reqrqxctgl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #reqrqxctgl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #reqrqxctgl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #reqrqxctgl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #reqrqxctgl .gt_column_spanner_outer:first-child { padding-left: 0; } #reqrqxctgl .gt_column_spanner_outer:last-child { padding-right: 0; } #reqrqxctgl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #reqrqxctgl .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #reqrqxctgl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #reqrqxctgl .gt_from_md > :first-child { margin-top: 0; } #reqrqxctgl .gt_from_md > :last-child { margin-bottom: 0; } #reqrqxctgl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #reqrqxctgl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #reqrqxctgl .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #reqrqxctgl .gt_row_group_first td { border-top-width: 2px; } #reqrqxctgl .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #reqrqxctgl .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #reqrqxctgl .gt_first_summary_row.thick { border-top-width: 2px; } #reqrqxctgl .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #reqrqxctgl .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #reqrqxctgl .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #reqrqxctgl .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #reqrqxctgl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #reqrqxctgl .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #reqrqxctgl .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #reqrqxctgl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #reqrqxctgl .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #reqrqxctgl .gt_left { text-align: left; } #reqrqxctgl .gt_center { text-align: center; } #reqrqxctgl .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #reqrqxctgl .gt_font_normal { font-weight: normal; } #reqrqxctgl .gt_font_bold { font-weight: bold; } #reqrqxctgl .gt_font_italic { font-style: italic; } #reqrqxctgl .gt_super { font-size: 65%; } #reqrqxctgl .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #reqrqxctgl .gt_asterisk { font-size: 100%; vertical-align: 0; } #reqrqxctgl .gt_indent_1 { text-indent: 5px; } #reqrqxctgl .gt_indent_2 { text-indent: 10px; } #reqrqxctgl .gt_indent_3 { text-indent: 15px; } #reqrqxctgl .gt_indent_4 { text-indent: 20px; } #reqrqxctgl .gt_indent_5 { text-indent: 25px; } Characteristic Beta 95% CI1 p-value pobreza -40 -64, -15 0.002 I(sqrt(nd)) -0.06 -0.08, -0.03 I(sqrt(pobreza)) 31 15, 47 I(sqrt(nd^pobreza)) 1.4 0.14, 2.7 0.030 R² 0.298 Adjusted R² 0.261 1 CI = Confidence Interval Después de tener la estimación del modelo se debe obtener el valor de la constante \\(\\Delta\\) para lo cual se usa el siguiente código. delta.hat = sum(baseFGV$vardir) / sum(exp(fitted.values(FGV1))) De donde se obtiene que \\(\\Delta = 1.6825614\\). Final es posible obtener la varianza suavizada ejecutando el siguiente comando. hat.sigma &lt;- data.frame(dam2 = baseFGV$dam2, hat_var = delta.hat * exp(fitted.values(FGV1))) baseFGV &lt;- left_join(baseFGV, hat.sigma) tba(head(baseFGV, 10)) dam2 pobreza nd vardir ln_sigma2 hat_var 00101 0.2225 6796 0.0004 -7.9505 0.0004 00201 0.1822 531 0.0004 -7.7493 0.0039 00206 0.3366 230 0.0031 -5.7661 0.0041 00301 0.4266 666 0.0043 -5.4432 0.0050 00302 0.4461 261 0.0014 -6.5697 0.0029 00303 0.5587 566 0.0142 -4.2552 0.0075 00304 0.5406 412 0.0116 -4.4550 0.0042 00401 0.3359 1219 0.0010 -6.9320 0.0042 00402 0.1496 172 0.0007 -7.2136 0.0047 00403 0.4644 309 0.0015 -6.4935 0.0031 Validación del modelo para la FGV par(mfrow = c(2, 2)) plot(FGV1) Comparación entre la varianza estimada versus la pronosticada por la FGV ggplot(baseFGV , aes(y = vardir, x = hat_var)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(x = &quot;FGV&quot;, y = &quot;VarDirEst&quot;) + ylab(&quot;Varianza del Estimador Directo&quot;) Predicción de la varianza suavizada base_sae &lt;- base_sae %&gt;% left_join(hat.sigma, by = &quot;dam2&quot;) Ahora, realizamos un gráfico de linea para ver la volatilidad es la estimaciones de las varianzas. ggplot(base_sae %&gt;% arrange(nd), aes(x = 1:nrow(base_sae))) + geom_line(aes(y = vardir, color = &quot;VarDirEst&quot;)) + geom_line(aes(y = hat_var, color = &quot;FGV&quot;)) + labs(y = &quot;Varianzas&quot;, x = &quot;Tamaño muestral&quot;, color = &quot; &quot;) + scale_x_continuous(breaks = seq(1, nrow(base_sae), by = 10), labels = base_sae$nd[order(base_sae$nd)][seq(1, nrow(base_sae), by = 10)]) + scale_color_manual(values = c(&quot;FGV&quot; = &quot;Blue&quot;, &quot;VarDirEst&quot; = &quot;Red&quot;)) El siguiente código utiliza la función mutate() del paquete dplyr para crear nuevas variables de la base de datos base_sae y luego guarda el resultado en un archivo RDS llamado base_FH_2018.rds. En concreto, el código realiza las siguientes operaciones: La variable deff_dam2 se ajusta a 1 cuando es NaN. La variable deff_FGV se calcula a partir de otras dos variables hat_var y vardir. Si vardir es 0, entonces deff_FGV se ajusta a 1. En caso contrario, se divide hat_var por vardir / deff_dam2 para obtener deff_FGV. La variable deff_FGV se regulariza utilizando el criterio MDS: si deff_FGV es menor que 1, se ajusta a 1. Finalmente, se calcula la variable n_eff_FGV dividiendo nd (el tamaño de la muestra) por deff_FGV. base_FH &lt;- base_sae %&gt;% mutate( deff_dam2 = ifelse(is.nan(deff_dam2), 1, deff_dam2), deff_FGV = ifelse( vardir == 0 , 1, hat_var / (vardir / deff_dam2) ), # Criterio MDS para regularizar el DeffFGV deff_FGV = ifelse(deff_FGV &lt; 1, 1, deff_FGV), n_eff_FGV = nd / deff_FGV ) saveRDS(object = base_FH, &quot;Recursos/Día2/Sesion2/Data/base_FH_2018.rds&quot;) "],["día-2---sesión-3--modelo-de-fay-herriot---estimación-de-la-pobreza.html", "Capítulo 7 Día 2 - Sesión 3- Modelo de Fay Herriot - Estimación de la pobreza", " Capítulo 7 Día 2 - Sesión 3- Modelo de Fay Herriot - Estimación de la pobreza El modelo de Fay Herriot, propuesto por Fay y Herriot (1979), es un modelo estadístico de área y es el más comúnmente utilizado, cabe tener en cuenta, que dentro de la metodología de estimación en áreas pequeñas, los modelos de área son los de mayor aplicación, ya que lo más factible es no contar con la información a nivel de individuo, pero si encontrar no solo los datos a nivel de área, sino también información auxiliar asociada a estos datos. Este modelo lineal mixto, fue el primero en incluir efectos aleatorios a nivel de área, lo que implica que la mayoría de la información que se introduce al modelo corresponde a agregaciaciones usualmente, departamentos, regiones, provincias, municipios entre otros, donde las estimaciones que se logran con el modelo se obtienen sobre estas agregaciones o subpoblaciones. El modelo FH enlaza indicadores de las áreas \\(\\theta_d\\), \\(d = 1, \\cdots , D\\), asumiendo que varían respeto a un vector de \\(p\\) covariables, \\(\\boldsymbol{x}_d\\) , de forma constante. El modelo esta dado por la ecuación \\[ \\theta_d = \\boldsymbol{x}^{T}_{d}\\boldsymbol{\\beta} + u_d ,\\ \\ \\ \\ \\ d = 1, \\cdots , D \\] \\(u_d\\) es el término de error, o el efecto aleatorio, diferente para cada área dado por \\[ \\begin{eqnarray*} u_{d} &amp; \\stackrel{iid}{\\sim} &amp; \\left(0,\\sigma_{u}^{2}\\right) \\end{eqnarray*} \\] Sin embargo, los verdaderos valores de los indicadores \\(\\theta_d\\) no son observables. Entonces, usamos el estimador directo \\(\\hat{\\theta}^{DIR}_d\\) para \\(\\theta_d\\) , lo que conlleva un error debido al muestro. \\(\\hat{\\theta}^{DIR}_d\\) todavía se considera insesgado bajo el diseño muestral. Podemos definir, entonces, \\[ \\hat{\\theta}^{DIR}_d = \\theta_d + e_d, \\ \\ \\ \\ \\ \\ d = 1, \\cdots , D \\] donde \\(e_d\\) es el error debido al muestreo, \\(e_{d} \\stackrel{ind}{\\sim} \\left(0,\\sigma^2\\right)\\) Dichas varianzas \\(\\sigma^2_d = var_{\\mathscr{P}}\\left(\\hat{\\theta}^{DIR}_d\\mid\\theta_d\\right)\\), \\(d = 1,\\cdots,D\\) se estiman con los microdatos de la encuesta. Por tanto, el modelo se hace, \\[ \\hat{\\theta}^{DIR}_d = \\boldsymbol{x}^{T}_{d}\\boldsymbol{\\beta} + u_d + e_d, \\ \\ \\ \\ \\ \\ d = 1, \\cdots , D \\] El BLUP (best linear unbiased predictor) bajo el modelo FH de \\(\\theta_d\\) viene dado por \\[ \\begin{eqnarray*} \\tilde{\\theta}_{d}^{FH} &amp; = &amp; \\boldsymbol{x}^{T}_{d}\\tilde{\\boldsymbol{\\beta}}+\\tilde{u}_{d} \\end{eqnarray*} \\] Si sustituimos \\(\\tilde{u}_d = \\gamma_d\\left(\\hat{\\theta}^{DIR}_d - \\boldsymbol{x}^{T}_{d}\\tilde{\\boldsymbol{\\beta}} \\right)\\) en el BLUP bajo el modelo FH, obtenemos \\[ \\begin{eqnarray*} \\tilde{\\theta}_{d}^{FH} &amp; = &amp; \\gamma_d\\hat{\\theta}^{DIR}_{d}+(1-\\gamma_d)\\boldsymbol{x}^{T}_{d}\\tilde{\\boldsymbol{\\beta}} \\end{eqnarray*} \\] siendo \\(\\gamma_d=\\frac{\\sigma^2_u}{\\sigma^2_u + \\sigma^2_d}\\). Habitualmente, no sabemos el verdadero valor de \\(\\sigma^2_u\\) efectos aleatorios \\(u_d\\). Sea \\(\\hat{\\sigma}^2_u\\) un estimador consistente para \\(\\sigma^2_u\\). Entonces, obtenemos el BLUP empírico (empirical BLUP, EBLUP) de \\(\\theta_d\\) , \\[ \\begin{eqnarray*} \\tilde{\\theta}_{d}^{FH} &amp; = &amp; \\hat{\\gamma_d}\\hat{\\theta}^{DIR}_{d}+(1-\\hat{\\gamma_d})\\boldsymbol{x}^{T}_{d}\\hat{\\boldsymbol{\\beta}} \\end{eqnarray*} \\] donde \\(\\hat{\\gamma_d}=\\frac{\\hat{\\sigma}^2_u}{\\hat{\\sigma}^2_u + \\sigma^2_d}\\). Modelo de área para la estimación de la pobreza El modelo bayesiano estaría definido como: \\[ \\begin{eqnarray*} \\hat{Y}_d\\mid\\theta_d,\\sigma_d^2 &amp; \\sim &amp; N\\left(\\theta_d,\\sigma_d^2\\right)\\\\ \\theta_d &amp; = &amp; \\boldsymbol{x}^{T}_{d}\\boldsymbol{\\beta}+u_d \\end{eqnarray*} \\] donde \\(u_d \\sim N(0 , \\sigma^2_u)\\) y \\(\\hat{Y}_d\\) es la estimación directa de la pobreza en el \\(d-ésimo\\) dominio. Las distribuciones previas para \\(\\boldsymbol{\\beta}\\) y \\(\\sigma^2_u\\) \\[ \\begin{eqnarray*} \\beta_p &amp; \\sim &amp; N(0, 10000)\\\\ \\sigma^2_u &amp;\\sim &amp; IG(0.0001, 0.0001) \\end{eqnarray*} \\] "],["procedimiento-de-estimación.html", "7.1 Procedimiento de estimación", " 7.1 Procedimiento de estimación Este código utiliza las librerías tidyverse y magrittr para procesamiento y analizar datos. La función readRDS() es utilizada para cargar un archivo de datos en formato RDS, que contiene las estimaciones directas y la varianza suvizada para la proporción de personas en condición de pobreza correspondientes al año 2018. Luego, se utiliza el operador %&gt;% de la librería magrittr para encadenar la selección de las columnas de interés, que corresponden a los nombres dam2, nd, pobreza, vardir y hat_var. library(tidyverse) library(magrittr) base_FH &lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/base_FH_2018.rds&quot;) %&gt;% select(dam2, nd, pobreza, vardir, hat_var) Lectura de las covariables, las cuales son obtenidas previamente. Dado la diferencia entre las escalas de las variables es necesario hacer un ajuste a estas. statelevel_predictors_df &lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/statelevel_predictors_df_dam2.rds&quot;) %&gt;% mutate_at(.vars = c(&quot;luces_nocturnas&quot;, &quot;cubrimiento_cultivo&quot;, &quot;cubrimiento_urbano&quot;, &quot;modificacion_humana&quot;, &quot;accesibilidad_hospitales&quot;, &quot;accesibilidad_hosp_caminado&quot;), function(x) as.numeric(scale(x))) Ahora, se realiza una unión completa (full_join) entre el conjunto de datos base_FH y los predictores statelevel_predictors_df utilizando la variable dam2 como clave de unión. Se utiliza la función tba() para imprimir las primeras 10 filas y 8 columnas del conjunto de datos resultante de la unión anterior. La unión completa (full_join) combina los datos de ambos conjuntos, manteniendo todas las filas de ambos, y llenando con valores faltantes (NA) en caso de no encontrar coincidencias en la variable de unión (dam2 en este caso). La función tba() imprime una tabla en formato HTML en la consola de R que muestra las primeras 10 filas y 8 columnas del conjunto de datos resultante de la unión. base_FH &lt;- full_join(base_FH, statelevel_predictors_df, by = &quot;dam2&quot; ) tba(base_FH[1:10,1:8]) dam2 nd pobreza vardir hat_var modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 00101 6796 0.2225 0.0004 0.0004 3.6127 -1.1835 -1.5653 00201 531 0.1822 0.0004 0.0039 -0.0553 0.4449 0.2100 00206 230 0.3366 0.0031 0.0041 0.5157 -0.1468 -0.1811 00301 666 0.4266 0.0043 0.0050 0.1364 0.5744 1.1660 00302 261 0.4461 0.0014 0.0029 -0.5103 0.2531 1.0880 00303 566 0.5587 0.0142 0.0075 -0.6591 0.6249 1.2229 00304 412 0.5406 0.0116 0.0042 -0.5573 1.4586 2.7337 00401 1219 0.3359 0.0010 0.0042 0.3979 -0.0833 -0.4490 00402 172 0.1496 0.0007 0.0047 -0.3661 -0.0114 -0.2863 00403 309 0.4644 0.0015 0.0031 -1.0446 0.4542 0.5702 # View(base_FH) "],["preparando-los-insumos-para-stan.html", "7.2 Preparando los insumos para STAN", " 7.2 Preparando los insumos para STAN Dividir la base de datos en dominios observados y no observados. Dominios observados. data_dir &lt;- base_FH %&gt;% filter(!is.na(pobreza)) Dominios NO observados. data_syn &lt;- base_FH %&gt;% anti_join(data_dir %&gt;% select(dam2)) tba(data_syn[1:10,1:8]) dam2 nd pobreza vardir hat_var modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 00202 NA NA NA NA -0.3758 0.0000 0.1482 00203 NA NA NA NA -0.9259 0.5732 -0.1402 00204 NA NA NA NA -1.3166 1.1111 0.4438 00205 NA NA NA NA -0.7474 2.1155 1.2271 00207 NA NA NA NA 1.7368 -0.7648 -0.4861 00208 NA NA NA NA -0.5942 0.3212 -0.1697 00209 NA NA NA NA -1.5280 3.0192 1.9428 00210 NA NA NA NA -1.0038 0.5778 0.2678 00305 NA NA NA NA -0.8480 1.5047 3.2004 00404 NA NA NA NA -0.5678 1.0735 0.9856 Definir matriz de efectos fijos. Define un modelo lineal utilizando la función formula(), que incluye varias variables predictoras, como la edad, la etnia, la tasa de desocupación, entre otras. Utiliza la función model.matrix() para generar matrices de diseño (Xdat y Xs) a partir de los datos observados (data_dir) y no observados (data_syn) para utilizar en la construcción de modelos de regresión. La función model.matrix() convierte las variables categóricas en variables binarias (dummy), de manera que puedan ser utilizadas. formula_mod &lt;- formula(~ sexo2 + anoest2 + anoest3 + anoest4 + edad2 + edad3 + edad4 + edad5 + tasa_desocupacion + luces_nocturnas + cubrimiento_cultivo + alfabeta) ## Dominios observados Xdat &lt;- model.matrix(formula_mod, data = data_dir) ## Dominios no observados Xs &lt;- model.matrix(formula_mod, data = data_syn) Ahora, se utiliza la función setdiff() para identificar las columnas de Xdat que no están presentes en \\(X_s\\), es decir, las variables que no se encuentran en los datos no observados. A continuación, se crea una matriz temporal (temp) con ceros para las columnas faltantes de \\(X_s\\), y se agregan estas columnas a \\(X_s\\) utilizando cbind(). El resultado final es una matriz Xs con las mismas variables que Xdat, lo que asegura que se puedan realizar comparaciones adecuadas entre los datos observados y no observados en la construcción de modelos de regresión. En general, este código es útil para preparar los datos para su posterior análisis y asegurar que los modelos de regresión sean adecuados para su uso. temp &lt;- setdiff(colnames(Xdat),colnames(Xs)) temp &lt;- matrix( 0, nrow = nrow(Xs), ncol = length(temp), dimnames = list(1:nrow(Xs), temp) ) Xs &lt;- cbind(Xs,temp)[,colnames(Xdat)] Creando lista de parámetros para STAN sample_data &lt;- list( N1 = nrow(Xdat), # Observados. N2 = nrow(Xs), # NO Observados. p = ncol(Xdat), # Número de regresores. X = as.matrix(Xdat), # Covariables Observados. Xs = as.matrix(Xs), # Covariables NO Observados y = as.numeric(data_dir$pobreza), # Estimación directa sigma_e = sqrt(data_dir$hat_var) # Error de estimación ) Rutina implementada en STAN data { int&lt;lower=0&gt; N1; // number of data items int&lt;lower=0&gt; N2; // number of data items for prediction int&lt;lower=0&gt; p; // number of predictors matrix[N1, p] X; // predictor matrix matrix[N2, p] Xs; // predictor matrix vector[N1] y; // predictor matrix vector[N1] sigma_e; // known variances } parameters { vector[p] beta; // coefficients for predictors real&lt;lower=0&gt; sigma2_u; vector[N1] u; } transformed parameters{ vector[N1] theta; vector[N1] thetaSyn; vector[N1] thetaFH; vector[N1] gammaj; real&lt;lower=0&gt; sigma_u; thetaSyn = X * beta; theta = thetaSyn + u; sigma_u = sqrt(sigma2_u); gammaj = to_vector(sigma_u ./ (sigma_u + sigma_e)); thetaFH = (gammaj) .* y + (1-gammaj).*thetaSyn; } model { // likelihood y ~ normal(theta, sigma_e); // priors beta ~ normal(0, 100); u ~ normal(0, sigma_u); sigma2_u ~ inv_gamma(0.0001, 0.0001); } generated quantities{ vector[N2] y_pred; for(j in 1:N2) { y_pred[j] = normal_rng(Xs[j] * beta, sigma_u); } } Compilando el modelo en STAN. A continuación mostramos la forma de compilar el código de STAN desde R. En este código se utiliza la librería rstan para ajustar un modelo bayesiano utilizando el archivo 17FH_normal.stan que contiene el modelo escrito en el lenguaje de modelado probabilístico Stan. En primer lugar, se utiliza la función stan() para ajustar el modelo a los datos de sample_data. Los argumentos que se pasan a stan() incluyen el archivo que contiene el modelo (fit_FH_normal), los datos (sample_data), y los argumentos para controlar el proceso de ajuste del modelo, como el número de iteraciones para el período de calentamiento (warmup) y el período de muestreo (iter), y el número de núcleos de la CPU para utilizar en el proceso de ajuste (cores). Además, se utiliza la función parallel::detectCores() para detectar automáticamente el número de núcleos disponibles en la CPU, y se establece la opción mc.cores para aprovechar el número máximo de núcleos disponibles para el ajuste del modelo. El resultado del ajuste del modelo es almacenado en model_FH_normal, que contiene una muestra de la distribución posterior del modelo, la cual puede ser utilizada para realizar inferencias sobre los parámetros del modelo y las predicciones. En general, este código es útil para ajustar modelos bayesianos utilizando Stan y realizar inferencias posteriores. library(rstan) fit_FH_normal &lt;- &quot;Recursos/Día2/Sesion3/Data/modelosStan/17FH_normal.stan&quot; options(mc.cores = parallel::detectCores()) model_FH_normal &lt;- stan( file = fit_FH_normal, data = sample_data, verbose = FALSE, warmup = 500, iter = 1000, cores = 4 ) saveRDS(object = model_FH_normal, file = &quot;Recursos/Día2/Sesion3/Data/model_FH_normal.rds&quot;) Leer el modelo model_FH_normal&lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/model_FH_normal.rds&quot;) 7.2.1 Resultados del modelo para los dominios observados. En este código, se cargan las librerías bayesplot, posterior y patchwork, que se utilizan para realizar gráficos y visualizaciones de los resultados del modelo. A continuación, se utiliza la función as.array() y as_draws_matrix() para extraer las muestras de la distribución posterior del parámetro theta del modelo, y se seleccionan aleatoriamente 100 filas de estas muestras utilizando la función sample(), lo que resulta en la matriz y_pred2. Finalmente, se utiliza la función ppc_dens_overlay() de bayesplot para graficar una comparación entre la distribución empírica de la variable observada pobreza en los datos (data_dir$pobreza) y las distribuciones predictivas posteriores simuladas para la misma variable (y_pred2). La función ppc_dens_overlay() produce un gráfico de densidad para ambas distribuciones, lo que permite visualizar cómo se comparan. library(bayesplot) library(posterior) library(patchwork) y_pred_B &lt;- as.array(model_FH_normal, pars = &quot;theta&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(data_dir$pobreza), y_pred2) Análisis gráfico de la convergencia de las cadenas de \\(\\sigma^2_V\\). posterior_sigma2_u &lt;- as.array(model_FH_normal, pars = &quot;sigma2_u&quot;) (mcmc_dens_chains(posterior_sigma2_u) + mcmc_areas(posterior_sigma2_u) ) / mcmc_trace(posterior_sigma2_u) #traceplot(model_FH_normal, pars = &quot;sigma2_u&quot;, inc_warmup = TRUE) Como método de validación se comparan las diferentes elementos de la estimación del modelo de FH obtenidos en STAN theta &lt;- summary(model_FH_normal,pars = &quot;theta&quot;)$summary %&gt;% data.frame() thetaSyn &lt;- summary(model_FH_normal,pars = &quot;thetaSyn&quot;)$summary %&gt;% data.frame() theta_FH &lt;- summary(model_FH_normal,pars = &quot;thetaFH&quot;)$summary %&gt;% data.frame() data_dir %&lt;&gt;% mutate( thetadir = pobreza, theta_pred = theta$mean, thetaSyn = thetaSyn$mean, thetaFH = theta_FH$mean, theta_pred_EE = theta$sd, Cv_theta_pred = theta_pred_EE/theta_pred ) # saveRDS(data_dir,&quot;Recursos/Día2/Sesion3/0Recursos/data_dir.rds&quot;) # Estimación predicción del modelo vs ecuación ponderada de FH p11 &lt;- ggplot(data_dir, aes(x = theta_pred, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación con la ecuación ponderada de FH Vs estimación sintética p12 &lt;- ggplot(data_dir, aes(x = thetaSyn, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación con la ecuación ponderada de FH Vs estimación directa p21 &lt;- ggplot(data_dir, aes(x = thetadir, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación directa Vs estimación sintética p22 &lt;- ggplot(data_dir, aes(x = thetadir, y = thetaSyn)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) (p11+p12)/(p21+p22) Estimación del FH de la pobreza en los dominios NO observados. theta_syn_pred &lt;- summary(model_FH_normal,pars = &quot;y_pred&quot;)$summary %&gt;% data.frame() data_syn &lt;- data_syn %&gt;% mutate( theta_pred = theta_syn_pred$mean, thetaSyn = theta_pred, thetaFH = theta_pred, theta_pred_EE = theta_syn_pred$sd, Cv_theta_pred = theta_pred_EE/theta_pred) #saveRDS(data_syn,&quot;Recursos/Día2/Sesion3/0Recursos/data_syn.rds&quot;) tba(data_syn %&gt;% slice(1:10) %&gt;% select(dam2:hat_var,theta_pred:Cv_theta_pred)) dam2 nd pobreza vardir hat_var theta_pred thetaSyn thetaFH theta_pred_EE Cv_theta_pred 00202 NA NA NA NA 0.2939 0.2939 0.2939 0.0934 0.3177 00203 NA NA NA NA 0.2816 0.2816 0.2816 0.0881 0.3131 00204 NA NA NA NA 0.2930 0.2930 0.2930 0.0916 0.3128 00205 NA NA NA NA 0.1812 0.1812 0.1812 0.0977 0.5392 00207 NA NA NA NA 0.3500 0.3500 0.3500 0.0921 0.2632 00208 NA NA NA NA 0.2330 0.2330 0.2330 0.1001 0.4294 00209 NA NA NA NA 0.2275 0.2275 0.2275 0.1214 0.5338 00210 NA NA NA NA 0.2784 0.2784 0.2784 0.1013 0.3639 00305 NA NA NA NA 0.4831 0.4831 0.4831 0.0975 0.2019 00404 NA NA NA NA 0.4305 0.4305 0.4305 0.1088 0.2527 consolidando las bases de estimaciones para dominios observados y NO observados. estimacionesPre &lt;- bind_rows(data_dir, data_syn) %&gt;% select(dam2, theta_pred) "],["proceso-de-benchmark.html", "7.3 Proceso de Benchmark", " 7.3 Proceso de Benchmark Del censo extraer el total de personas por DAM2 total_pp &lt;- readRDS(file = &quot;Recursos/Día2/Sesion3/Data/total_personas_dam2.rds&quot;) N_dam_pp &lt;- total_pp %&gt;% group_by(region) %&gt;% mutate(region_pp = sum(pp_dam2) ) tba(N_dam_pp %&gt;% slice(1:20)) region nombre_region dam dam2 id_municipio pp_dam2 region_pp 01 Región Cibao Norte 09 00901 010901 179829 1516957 01 Región Cibao Norte 09 00902 010902 6911 1516957 01 Región Cibao Norte 09 00903 010903 37378 1516957 01 Región Cibao Norte 09 00904 010904 7820 1516957 01 Región Cibao Norte 18 01801 011801 158756 1516957 01 Región Cibao Norte 18 01802 011802 18868 1516957 01 Región Cibao Norte 18 01803 011803 6333 1516957 01 Región Cibao Norte 18 01804 011804 22058 1516957 01 Región Cibao Norte 18 01805 011805 12639 1516957 01 Región Cibao Norte 18 01806 011806 16464 1516957 01 Región Cibao Norte 18 01807 011807 49593 1516957 01 Región Cibao Norte 18 01808 011808 17169 1516957 01 Región Cibao Norte 18 01809 011809 19717 1516957 01 Región Cibao Norte 25 02501 012501 691262 1516957 01 Región Cibao Norte 25 02502 012502 42092 1516957 01 Región Cibao Norte 25 02503 012503 16993 1516957 01 Región Cibao Norte 25 02504 012504 25539 1516957 01 Región Cibao Norte 25 02505 012505 38628 1516957 01 Región Cibao Norte 25 02506 012506 51695 1516957 01 Región Cibao Norte 25 02507 012507 37349 1516957 02 Región Cibao Sur 13 01301 021301 248089 710821 02 Región Cibao Sur 13 01302 021302 59052 710821 02 Región Cibao Sur 13 01303 021303 56803 710821 02 Región Cibao Sur 13 01304 021304 30261 710821 02 Región Cibao Sur 24 02401 022401 76554 710821 02 Región Cibao Sur 24 02402 022402 13759 710821 02 Región Cibao Sur 24 02403 022403 22117 710821 02 Región Cibao Sur 24 02404 022404 38962 710821 02 Región Cibao Sur 28 02801 022801 125338 710821 02 Región Cibao Sur 28 02802 022802 18952 710821 02 Región Cibao Sur 28 02803 022803 20934 710821 03 Región Cibao Nordeste 06 00601 030601 188118 624186 03 Región Cibao Nordeste 06 00602 030602 14062 624186 03 Región Cibao Nordeste 06 00603 030603 15709 624186 03 Región Cibao Nordeste 06 00604 030604 17864 624186 03 Región Cibao Nordeste 06 00605 030605 33663 624186 03 Región Cibao Nordeste 06 00606 030606 14661 624186 03 Región Cibao Nordeste 06 00607 030607 5497 624186 03 Región Cibao Nordeste 14 01401 031401 76993 624186 03 Región Cibao Nordeste 14 01402 031402 24524 624186 03 Región Cibao Nordeste 14 01403 031403 24240 624186 03 Región Cibao Nordeste 14 01404 031404 15168 624186 03 Región Cibao Nordeste 19 01901 031901 39557 624186 03 Región Cibao Nordeste 19 01902 031902 27765 624186 03 Región Cibao Nordeste 19 01903 031903 24871 624186 03 Región Cibao Nordeste 20 02001 032001 58156 624186 03 Región Cibao Nordeste 20 02002 032002 24509 624186 03 Región Cibao Nordeste 20 02003 032003 18829 624186 04 Región Cibao Noroeste 05 00501 040501 28071 394068 04 Región Cibao Noroeste 05 00502 040502 15624 394068 04 Región Cibao Noroeste 05 00503 040503 6951 394068 04 Región Cibao Noroeste 05 00504 040504 7274 394068 04 Región Cibao Noroeste 05 00505 040505 6035 394068 04 Región Cibao Noroeste 15 01501 041501 24644 394068 04 Región Cibao Noroeste 15 01502 041502 14921 394068 04 Región Cibao Noroeste 15 01503 041503 35923 394068 04 Región Cibao Noroeste 15 01504 041504 10559 394068 04 Región Cibao Noroeste 15 01505 041505 9136 394068 04 Región Cibao Noroeste 15 01506 041506 14424 394068 04 Región Cibao Noroeste 26 02601 042601 34540 394068 04 Región Cibao Noroeste 26 02602 042602 11183 394068 04 Región Cibao Noroeste 26 02603 042603 11753 394068 04 Región Cibao Noroeste 27 02701 042701 76863 394068 04 Región Cibao Noroeste 27 02702 042702 62205 394068 04 Región Cibao Noroeste 27 02703 042703 23962 394068 05 Región Valdesia 02 00201 050201 91345 1028129 05 Región Valdesia 02 00202 050202 11243 1028129 05 Región Valdesia 02 00203 050203 17620 1028129 05 Región Valdesia 02 00204 050204 20041 1028129 05 Región Valdesia 02 00205 050205 15257 1028129 05 Región Valdesia 02 00206 050206 19020 1028129 05 Región Valdesia 02 00207 050207 11235 1028129 05 Región Valdesia 02 00208 050208 17647 1028129 05 Región Valdesia 02 00209 050209 5263 1028129 05 Región Valdesia 02 00210 050210 5640 1028129 05 Región Valdesia 17 01701 051701 157316 1028129 05 Región Valdesia 17 01702 051702 27028 1028129 05 Región Valdesia 21 02101 052101 232769 1028129 05 Región Valdesia 21 02102 052102 15466 1028129 05 Región Valdesia 21 02103 052103 124193 1028129 05 Región Valdesia 21 02104 052104 31057 1028129 05 Región Valdesia 21 02105 052105 84312 1028129 05 Región Valdesia 21 02106 052106 42325 1028129 05 Región Valdesia 21 02107 052107 30268 1028129 05 Región Valdesia 21 02108 052108 9540 1028129 06 Región Enriquillo 03 00301 060301 36511 368594 06 Región Enriquillo 03 00302 060302 15702 368594 06 Región Enriquillo 03 00303 060303 26772 368594 06 Región Enriquillo 03 00304 060304 10619 368594 06 Región Enriquillo 03 00305 060305 7709 368594 06 Región Enriquillo 04 00401 060401 83619 368594 06 Región Enriquillo 04 00402 060402 14823 368594 06 Región Enriquillo 04 00403 060403 13164 368594 06 Región Enriquillo 04 00404 060404 15390 368594 06 Región Enriquillo 04 00405 060405 21605 368594 06 Región Enriquillo 04 00406 060406 3970 368594 06 Región Enriquillo 04 00407 060407 9112 368594 06 Región Enriquillo 04 00408 060408 8042 368594 06 Región Enriquillo 04 00409 060409 4703 368594 06 Región Enriquillo 04 00410 060410 8186 368594 06 Región Enriquillo 04 00411 060411 4491 368594 06 Región Enriquillo 10 01001 061001 16510 368594 06 Región Enriquillo 10 01002 061002 12029 368594 06 Región Enriquillo 10 01003 061003 8310 368594 06 Región Enriquillo 10 01004 061004 5668 368594 07 Región EL Valle 07 00701 070701 25924 295362 07 Región EL Valle 07 00702 070702 6533 295362 07 Región EL Valle 07 00703 070703 8344 295362 07 Región EL Valle 07 00704 070704 10587 295362 07 Región EL Valle 07 00705 070705 7281 295362 07 Región EL Valle 07 00706 070706 4360 295362 07 Región EL Valle 22 02201 072201 132177 295362 07 Región EL Valle 22 02202 072202 9685 295362 07 Región EL Valle 22 02203 072203 20843 295362 07 Región EL Valle 22 02204 072204 13062 295362 07 Región EL Valle 22 02205 072205 44163 295362 07 Región EL Valle 22 02206 072206 12403 295362 08 Región Yuma 08 00801 080801 66867 606323 08 Región Yuma 08 00802 080802 20813 606323 08 Región Yuma 11 01101 081101 251243 606323 08 Región Yuma 11 01102 081102 21967 606323 08 Región Yuma 12 01201 081201 139671 606323 08 Región Yuma 12 01202 081202 16558 606323 08 Región Yuma 12 01203 081203 89204 606323 09 Región Higuamo 23 02301 092301 195307 561431 09 Región Higuamo 23 02302 092302 22573 561431 09 Región Higuamo 23 02303 092303 8901 561431 09 Región Higuamo 23 02304 092304 30051 561431 09 Región Higuamo 23 02305 092305 19034 561431 09 Región Higuamo 23 02306 092306 14592 561431 09 Región Higuamo 29 02901 092901 46723 561431 09 Región Higuamo 29 02902 092902 31889 561431 09 Región Higuamo 29 02903 092903 31096 561431 09 Región Higuamo 29 02904 092904 55348 561431 09 Región Higuamo 29 02905 092905 20900 561431 09 Región Higuamo 30 03001 093001 61517 561431 09 Región Higuamo 30 03002 093002 16272 561431 09 Región Higuamo 30 03003 093003 7228 561431 10 Región Ozama 01 00101 100101 965040 3339410 10 Región Ozama 32 03201 103201 948885 3339410 10 Región Ozama 32 03202 103202 363321 3339410 10 Región Ozama 32 03203 103203 529390 3339410 10 Región Ozama 32 03204 103204 142019 3339410 10 Región Ozama 32 03205 103205 43963 3339410 10 Región Ozama 32 03206 103206 272776 3339410 10 Región Ozama 32 03207 103207 74016 3339410 Obtener las estimaciones directa por región o el nivel de agregación en el cual la encuesta es representativa. En este código, se lee un archivo RDS de una encuesta y se utilizan las funciones transmute() y paste0() para seleccionar y transformar las variables de interés. En primer lugar, se crea una variable dam que corresponde al identificador de la división administrativa mayor de la encuesta. A continuación, se utiliza la columna dam_ee para crear una variable dam, se selecciona la variable dam2 que corresponde al identificador de la división administrativa municipal de segundo nivel (subdivisión del departamento) de la encuesta. Luego, se crea una variable wkx que corresponde al peso de la observación en la encuesta, y una variable upm que corresponde al identificador del segmento muestral en la encuesta. La variable estrato se crea utilizando la función paste0(), que concatena los valores de dam y area_ee (una variable que indica el área geográfica en la que se encuentra la vivienda de la encuesta). Finalmente, se crea una variable pobreza que toma el valor 1 si el ingreso de la vivienda es menor que un umbral lp, y 0 en caso contrario. encuesta &lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/encuestaDOM21N1.rds&quot;) %&gt;% transmute( dam = haven::as_factor(dam_ee,levels = &quot;values&quot;), dam = str_pad(dam,width = 2,pad = &quot;0&quot;), dam2, wkx = `_fep`, upm = `_upm`, estrato =`_estrato`, pobreza = ifelse(ingcorte &lt; lp, 1 , 0)) %&gt;% inner_join(N_dam_pp %&gt;% select(region,dam2) ) El código está realizando un análisis de datos de encuestas utilizando el paquete survey de R. Primero, se crea un objeto diseno de diseño de encuestas usando la función as_survey_design() del paquete srvyr, que incluye los identificadores de la unidad primaria de muestreo (upm), los pesos (wkx), las estratos (estrato) y los datos de la encuesta (encuesta). Posteriormente, se agrupa el objeto diseno por la variable “Agregado” y se calcula la media de la variable pobreza con un intervalo de confianza para toda la población utilizando la función survey_mean(). El resultado se guarda en el objeto directoDam y se muestra en una tabla. library(survey) library(srvyr) options(survey.lonely.psu = &quot;adjust&quot;) diseno &lt;- as_survey_design( ids = upm, weights = wkx, strata = estrato, nest = TRUE, .data = encuesta ) directoDam &lt;- diseno %&gt;% group_by(region) %&gt;% summarise( theta_dir = survey_mean(pobreza, vartype = c(&quot;ci&quot;)) ) tba(directoDam) region theta_dir theta_dir_low theta_dir_upp 01 0.1696 0.1472 0.1919 02 0.1618 0.1230 0.2007 03 0.1808 0.1371 0.2245 04 0.1714 0.1269 0.2160 05 0.2629 0.2287 0.2972 06 0.4221 0.3741 0.4702 07 0.2957 0.2316 0.3599 08 0.1998 0.1605 0.2392 09 0.2258 0.1817 0.2700 10 0.2409 0.2213 0.2604 Realizar el consolidando información obtenida en 1 y 2. temp &lt;- estimacionesPre %&gt;% inner_join(N_dam_pp %&gt;% select(region,dam2,pp_dam2,region_pp) ) %&gt;% inner_join(directoDam ) tba(temp %&gt;% slice(1:10)) dam2 theta_pred region pp_dam2 region_pp theta_dir theta_dir_low theta_dir_upp 00101 0.2204 10 965040 3339410 0.2409 0.2213 0.2604 00201 0.2234 05 91345 1028129 0.2629 0.2287 0.2972 00206 0.3097 05 19020 1028129 0.2629 0.2287 0.2972 00301 0.4158 06 36511 368594 0.4221 0.3741 0.4702 00302 0.4343 06 15702 368594 0.4221 0.3741 0.4702 00303 0.4579 06 26772 368594 0.4221 0.3741 0.4702 00304 0.4922 06 10619 368594 0.4221 0.3741 0.4702 00401 0.3379 06 83619 368594 0.4221 0.3741 0.4702 00402 0.2213 06 14823 368594 0.4221 0.3741 0.4702 00403 0.4380 06 13164 368594 0.4221 0.3741 0.4702 Con la información organizada realizar el calculo de los pesos para el Benchmark R_dam2 &lt;- temp %&gt;% group_by(region) %&gt;% summarise( R_dam_RB = unique(theta_dir) / sum((pp_dam2 / region_pp ) * theta_pred) ) tba(R_dam2) region R_dam_RB 01 1.0526 02 0.9339 03 1.1303 04 1.0137 05 1.0035 06 1.0894 07 0.9750 08 1.0018 09 0.8851 10 0.9941 calculando los pesos para cada dominio. pesos &lt;- temp %&gt;% mutate(W_i = pp_dam2 / region_pp) %&gt;% select(dam2, W_i) tba(pesos %&gt;% slice(1:10)) dam2 W_i 00101 0.2890 00201 0.0888 00206 0.0185 00301 0.0991 00302 0.0426 00303 0.0726 00304 0.0288 00401 0.2269 00402 0.0402 00403 0.0357 Realizar la estimación FH Benchmark En este proceso, se realiza la adición de una nueva columna denominada R_dam_RB, que es obtenida a partir de un objeto denominado R_dam2. Posteriormente, se agrega una nueva columna denominada theta_pred_RBench, la cual es igual a la multiplicación de R_dam_RB y theta_pred. Finalmente, se hace un left_join con el dataframe pesos, y se seleccionan únicamente las columnas dam, dam2, W_i, theta_pred y theta_pred_RBench para ser presentadas en una tabla (tba) que muestra únicamente las primeras 10 filas. estimacionesBench &lt;- estimacionesPre %&gt;% inner_join(N_dam_pp %&gt;% select(region,dam2) )%&gt;% left_join(R_dam2, by = c(&quot;region&quot;)) %&gt;% mutate(theta_pred_RBench = R_dam_RB * theta_pred) %&gt;% left_join(pesos) %&gt;% select(region, dam2, W_i, theta_pred, theta_pred_RBench) tba(estimacionesBench %&gt;% slice(1:10)) region dam2 W_i theta_pred theta_pred_RBench 10 00101 0.2890 0.2204 0.2191 05 00201 0.0888 0.2234 0.2242 05 00206 0.0185 0.3097 0.3108 06 00301 0.0991 0.4158 0.4529 06 00302 0.0426 0.4343 0.4731 06 00303 0.0726 0.4579 0.4988 06 00304 0.0288 0.4922 0.5362 06 00401 0.2269 0.3379 0.3681 06 00402 0.0402 0.2213 0.2411 06 00403 0.0357 0.4380 0.4771 Validación: Estimación FH con Benchmark estimacionesBench %&gt;% group_by(region) %&gt;% summarise(theta_reg_RB = sum(W_i * theta_pred_RBench)) %&gt;% left_join(directoDam, by = &quot;region&quot;) %&gt;% tba() region theta_reg_RB theta_dir theta_dir_low theta_dir_upp 01 0.1696 0.1696 0.1472 0.1919 02 0.1618 0.1618 0.1230 0.2007 03 0.1808 0.1808 0.1371 0.2245 04 0.1714 0.1714 0.1269 0.2160 05 0.2629 0.2629 0.2287 0.2972 06 0.4221 0.4221 0.3741 0.4702 07 0.2957 0.2957 0.2316 0.3599 08 0.1998 0.1998 0.1605 0.2392 09 0.2258 0.2258 0.1817 0.2700 10 0.2409 0.2409 0.2213 0.2604 "],["validación-de-los-resultados..html", "7.4 Validación de los resultados.", " 7.4 Validación de los resultados. Este código junta las estimaciones del modelo con pesos de benchmarking con los valores observados y sintéticos, y luego resume las estimaciones combinadas para compararlas con la estimación directa obtenida anteriormente. temp &lt;- estimacionesBench %&gt;% left_join( bind_rows( data_dir %&gt;% select(dam2, thetaSyn, thetaFH), data_syn %&gt;% select(dam2, thetaSyn, thetaFH))) %&gt;% group_by(region) %&gt;% summarise(thetaSyn = sum(W_i * thetaSyn), thetaFH = sum(W_i * theta_pred), theta_RBench = sum(W_i * theta_pred_RBench) ) %&gt;% left_join(directoDam, by = &quot;region&quot;) %&gt;% mutate(id = 1:n()) temp %&lt;&gt;% gather(key = &quot;Metodo&quot;,value = &quot;Estimacion&quot;, -id, -region, -theta_dir_upp, -theta_dir_low) ggplot(data = temp, aes(x = id, y = Estimacion, shape = Metodo)) + geom_point(aes(color = Metodo), size = 2) + geom_line(aes(y = theta_dir_low), linetype = 2) + geom_line(aes(y = theta_dir_upp), linetype = 2) + theme_bw(10) + labs(y = &quot;&quot;, x = &quot;&quot;) "],["mapa-de-pobreza.html", "7.5 Mapa de pobreza", " 7.5 Mapa de pobreza Este es un bloque de código se cargan varios paquetes (sp, sf, tmap) y realiza algunas operaciones. Primero, realiza una unión (left_join) entre las estimaciones de ajustadas por el Benchmarking (estimacionesBench) y las estimaciones del modelo (data_dir, data_syn), utilizando la variable dam2 como clave para la unión. Luego, lee un archivo Shapefile que contiene información geoespacial del país. A continuación, crea un mapa temático (tmap) utilizando la función tm_shape() y agregando capas con la función tm_polygons(). El mapa representa una variable theta_pred_RBench utilizando una paleta de colores llamada “YlOrRd” y establece los cortes de los intervalos de la variable con la variable brks_lp. Finalmente, la función tm_layout() establece algunos parámetros de diseño del mapa, como la relación de aspecto (asp). library(sp) library(sf) library(tmap) estimacionesBench %&lt;&gt;% left_join( bind_rows( data_dir %&gt;% select(dam2, theta_pred_EE , Cv_theta_pred), data_syn %&gt;% select(dam2, theta_pred_EE , Cv_theta_pred))) ## Leer Shapefile del país ShapeSAE &lt;- read_sf(&quot;Recursos/Día2/Sesion3/Shape/DOM_dam2.shp&quot;) %&gt;% rename(dam2 = id_dominio) %&gt;% mutate(dam2 = str_pad( string = dam2, width = 5, pad = &quot;0&quot; )) mapa &lt;- tm_shape(ShapeSAE %&gt;% left_join(estimacionesBench, by = &quot;dam2&quot;)) brks_lp &lt;- c(0,0.1,0.15, 0.2, 0.3, 0.4, 0.6, 1) tmap_options(check.and.fix = TRUE) Mapa_lp &lt;- mapa + tm_polygons( c(&quot;theta_pred_RBench&quot;), breaks = brks_lp, title = &quot;Mapa de pobreza&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 1.5) Mapa_lp "],["día-3---sesión-1--modelos-de-área---estimación-de-la-pobreza-y-la-transformación-arcoseno..html", "Capítulo 8 Día 3 - Sesión 1- Modelos de área - Estimación de la pobreza y la transformación ArcoSeno.", " Capítulo 8 Día 3 - Sesión 1- Modelos de área - Estimación de la pobreza y la transformación ArcoSeno. En su concepción más básica, el modelo de Fay-Herriot es una combinación lineal de covariables. Sin embargo, el resultado de esta combinación pueden tomar valores que se salen del rango aceptable en el que puede estar una proporción; es decir, en general el estimador de Fay-Herriot \\(\\theta \\in R\\), mientras que el estimador directo \\(\\theta \\in (0,1)\\). La transformación arcoseno esta dada por: \\[ \\hat{z}_d = arcsin\\left( \\sqrt{ \\hat{\\theta}_d} \\right) \\] donde \\[ Var\\left( \\hat{z}_d \\right) = \\frac{\\widehat{DEFF}_d}{4\\times n_d} = \\frac{1}{4\\times n_{d,efectivo} } \\] El modelo de Fay-Herriot estaría definido de la siguiente forma: \\[ \\begin{eqnarray*} Z_d \\mid \\mu_d,\\sigma^2_d &amp; \\sim &amp; N(\\mu_d, \\sigma^2_d)\\\\ \\mu_d &amp; = &amp; \\boldsymbol{x}^{T}_{d}\\boldsymbol{\\beta} + u_d \\\\ \\theta_d &amp; = &amp; \\left(sin(\\mu_d)\\right)^2 \\end{eqnarray*} \\] donde \\(u_d \\sim N(0 , \\sigma^2)\\). Suponga de las distribuciones previas para \\(\\boldsymbol{\\beta}\\) y \\(\\sigma_{u}^{2}\\) son dadas por \\[ \\begin{eqnarray*} \\boldsymbol{\\beta} \\sim N\\left(0,1000 \\right)\\\\ \\sigma_{u}^{2} \\sim IG\\left(0.0001,0.0001\\right) \\end{eqnarray*} \\] "],["procedimiento-de-estimación-1.html", "8.1 Procedimiento de estimación", " 8.1 Procedimiento de estimación Lectura de la base de datos que resultó en el paso anterior y selección de las columnas de interés library(tidyverse) library(magrittr) base_FH &lt;- readRDS(&quot;Recursos/Día3/Sesion1/Data/base_FH_2018.rds&quot;) %&gt;% transmute(dam2, ## id dominios pobreza, T_pobreza = asin(sqrt(pobreza)), ## creando zd n_effec = n_eff_FGV, ## n efectivo varhat = 1/(4*n_effec) ## varianza para zd ) Lectura de las covariables, las cuales son obtenidas previamente. Dado la diferencia entre las escalas de las variables es necesario hacer un ajuste a estas. statelevel_predictors_df &lt;- readRDS(&quot;Recursos/Día3/Sesion1/Data/statelevel_predictors_df_dam2.rds&quot;) %&gt;% mutate_at(.vars = c(&quot;luces_nocturnas&quot;, &quot;cubrimiento_cultivo&quot;, &quot;cubrimiento_urbano&quot;, &quot;modificacion_humana&quot;, &quot;accesibilidad_hospitales&quot;, &quot;accesibilidad_hosp_caminado&quot;), function(x) as.numeric(scale(x))) Uniendo las dos bases de datos. base_FH &lt;- full_join(base_FH, statelevel_predictors_df, by = &quot;dam2&quot; ) tba(base_FH[,1:8] %&gt;% head(10)) dam2 pobreza T_pobreza n_effec varhat modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 00101 0.2225 0.4912 332.3384 0.0008 3.6127 -1.1835 -1.5653 00201 0.1822 0.4409 28.0165 0.0089 -0.0553 0.4449 0.2100 00206 0.3366 0.6190 44.7971 0.0056 0.5157 -0.1468 -0.1811 00301 0.4266 0.7117 125.6580 0.0020 0.1364 0.5744 1.1660 00302 0.4461 0.7314 261.0000 0.0010 -0.5103 0.2531 1.0880 00303 0.5587 0.8442 75.7938 0.0033 -0.6591 0.6249 1.2229 00304 0.5406 0.8261 154.4069 0.0016 -0.5573 1.4586 2.7337 00401 0.3359 0.6182 105.4750 0.0024 0.3979 -0.0833 -0.4490 00402 0.1496 0.3972 59.6357 0.0042 -0.3661 -0.0114 -0.2863 00403 0.4644 0.7498 197.2378 0.0013 -1.0446 0.4542 0.5702 Seleccionando las covariables para el modelo. names_cov &lt;- c( &quot;sexo2&quot; , &quot;anoest2&quot; , &quot;anoest3&quot;, &quot;anoest4&quot;, &quot;edad2&quot; , &quot;edad3&quot; , &quot;edad4&quot; , &quot;edad5&quot; , &quot;tasa_desocupacion&quot; , &quot;luces_nocturnas&quot; , &quot;cubrimiento_cultivo&quot; , &quot;alfabeta&quot; ) "],["preparando-los-insumos-para-stan-1.html", "8.2 Preparando los insumos para STAN", " 8.2 Preparando los insumos para STAN Dividir la base de datos en dominios observados y no observados Dominios observados. data_dir &lt;- base_FH %&gt;% filter(!is.na(T_pobreza)) Dominios NO observados. data_syn &lt;- base_FH %&gt;% anti_join(data_dir %&gt;% select(dam2)) tba(data_syn[,1:8] %&gt;% slice(1:10)) dam2 pobreza T_pobreza n_effec varhat modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 00202 NA NA NA NA -0.3758 0.0000 0.1482 00203 NA NA NA NA -0.9259 0.5732 -0.1402 00204 NA NA NA NA -1.3166 1.1111 0.4438 00205 NA NA NA NA -0.7474 2.1155 1.2271 00207 NA NA NA NA 1.7368 -0.7648 -0.4861 00208 NA NA NA NA -0.5942 0.3212 -0.1697 00209 NA NA NA NA -1.5280 3.0192 1.9428 00210 NA NA NA NA -1.0038 0.5778 0.2678 00305 NA NA NA NA -0.8480 1.5047 3.2004 00404 NA NA NA NA -0.5678 1.0735 0.9856 Definir matriz de efectos fijos. ## Dominios observados Xdat &lt;- cbind(inter = 1,data_dir[,names_cov]) ## Dominios no observados Xs &lt;- cbind(inter = 1,data_syn[,names_cov]) Creando lista de parámetros para STAN sample_data &lt;- list( N1 = nrow(Xdat), # Observados. N2 = nrow(Xs), # NO Observados. p = ncol(Xdat), # Número de regresores. X = as.matrix(Xdat), # Covariables Observados. Xs = as.matrix(Xs), # Covariables NO Observados y = as.numeric(data_dir$T_pobreza), sigma_e = sqrt(data_dir$varhat) ) Compilando el modelo en STAN library(rstan) fit_FH_arcoseno &lt;- &quot;Recursos/Día3/Sesion1/Data/modelosStan/15FH_arcsin_normal.stan&quot; options(mc.cores = parallel::detectCores()) model_FH_arcoseno &lt;- stan( file = fit_FH_arcoseno, data = sample_data, verbose = FALSE, warmup = 500, iter = 1000, cores = 4 ) saveRDS(model_FH_arcoseno, &quot;Recursos/Día3/Sesion1/Data/model_FH_arcoseno.rds&quot;) model_FH_arcoseno &lt;- readRDS(&quot;Recursos/Día3/Sesion1/Data/model_FH_arcoseno.rds&quot;) 8.2.1 Resultados del modelo para los dominios observados. En este código, se cargan las librerías bayesplot, posterior y patchwork, que se utilizan para realizar gráficos y visualizaciones de los resultados del modelo. A continuación, se utiliza la función as.array() y as_draws_matrix() para extraer las muestras de la distribución posterior del parámetro theta del modelo, y se seleccionan aleatoriamente 100 filas de estas muestras utilizando la función sample(), lo que resulta en la matriz y_pred2. Finalmente, se utiliza la función ppc_dens_overlay() de bayesplot para graficar una comparación entre la distribución empírica de la variable observada pobreza en los datos (data_dir$pobreza) y las distribuciones predictivas posteriores simuladas para la misma variable (y_pred2). La función ppc_dens_overlay() produce un gráfico de densidad para ambas distribuciones, lo que permite visualizar cómo se comparan. library(bayesplot) library(patchwork) library(posterior) y_pred_B &lt;- as.array(model_FH_arcoseno, pars = &quot;theta&quot;) %&gt;% as_draws_matrix() rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(data_dir$pobreza), y_pred2) Análisis gráfico de la convergencia de las cadenas de \\(\\sigma^2_u\\). posterior_sigma2_u &lt;- as.array(model_FH_arcoseno, pars = &quot;sigma2_u&quot;) (mcmc_dens_chains(posterior_sigma2_u) + mcmc_areas(posterior_sigma2_u) ) / mcmc_trace(posterior_sigma2_u) # traceplot(model_FH_arcoseno,pars = &quot;sigma2_u&quot;,inc_warmup = TRUE) Estimación del FH de la pobreza en los dominios observados. theta_FH &lt;- summary(model_FH_arcoseno,pars = &quot;theta&quot;)$summary %&gt;% data.frame() data_dir %&lt;&gt;% mutate(pred_arcoseno = theta_FH$mean, pred_arcoseno_EE = theta_FH$sd, Cv_pred = pred_arcoseno_EE/pred_arcoseno) Estimación del FH de la pobreza en los dominios NO observados. theta_FH_pred &lt;- summary(model_FH_arcoseno,pars = &quot;theta_pred&quot;)$summary %&gt;% data.frame() data_syn &lt;- data_syn %&gt;% mutate(pred_arcoseno = theta_FH_pred$mean, pred_arcoseno_EE = theta_FH_pred$sd, Cv_pred = pred_arcoseno_EE/pred_arcoseno) "],["mapa-de-pobreza-1.html", "8.3 Mapa de pobreza", " 8.3 Mapa de pobreza El siguiente bloque de código carga los paquetes sp, sf y tmap, y realiza algunas operaciones. Primero, une (rbind) las estimaciones de los dominios observados y los no observados (data_dir, data_syn) y selecciona las variables dam2, pobreza, pred_arcoseno, pred_arcoseno_EE y Cv_pred utilizando la función select(). Luego, lee un archivo Shapefile que contiene información geoespacial del país. A continuación, crea un mapa temático (tmap) utilizando la función tm_shape() y agregando capas con la función tm_polygons(). El mapa representa dos variables llamadas pobreza y pred_arcoseno, utilizando una paleta de colores llamada “YlOrRd” y establece los cortes de los intervalos de las variables con la variable brks_lp. Finalmente, la función tm_layout() establece algunos parámetros de diseño del mapa, como la relación de aspecto (asp). library(sp) library(sf) library(tmap) data_map &lt;- rbind(data_dir, data_syn) %&gt;% select(dam2, pobreza, pred_arcoseno, pred_arcoseno_EE,Cv_pred ) ## Leer Shapefile del país ShapeSAE &lt;- read_sf(&quot;Recursos/Día3/Sesion1/Shape/DOM_dam2.shp&quot;) %&gt;% rename(dam2 = id_dominio) %&gt;% mutate(dam2 = str_pad( string = dam2, width = 5, pad = &quot;0&quot; )) mapa &lt;- tm_shape(ShapeSAE %&gt;% left_join(data_map, by = &quot;dam2&quot;)) brks_lp &lt;- c(0,0.15, 0.3, 0.45, 0.6, 1) tmap_options(check.and.fix = TRUE) Mapa_lp &lt;- mapa + tm_polygons( c(&quot;pobreza&quot;, &quot;pred_arcoseno&quot;), breaks = brks_lp, title = &quot;Mapa de pobreza&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 2.5) Mapa_lp "],["mapa-del-coeficiente-de-variación..html", "8.4 Mapa del coeficiente de variación.", " 8.4 Mapa del coeficiente de variación. Ahora, se crea un segundo mapa temático (tmap) llamado Mapa_cv. Utiliza la misma estructura del primer mapa (mapa) creado anteriormente y agrega una capa utilizando la función tm_polygons(). El mapa representa la variable Cv_pred, utilizando una paleta de colores llamada “YlOrRd” y establece el título del mapa con el parámetro title. La función tm_layout() establece algunos parámetros de diseño del mapa, como la relación de aspecto (asp). Finalmente, el mapa Mapa_cv se muestra en la consola de R. Mapa_cv &lt;- mapa + tm_polygons( c(&quot;Cv_pred&quot;), title = &quot;Mapa de pobreza(cv)&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 2.5) Mapa_cv "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
